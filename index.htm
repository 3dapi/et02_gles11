<?php
	include '../base/lc_header.php';
	include '../base/lc_util.php';
?>

<!--------------------------- Body Begin ---------------------------------------->

<div class="Section1">

<br>
<h1>◈12 OpenGL ES 1.1◈</h1>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>12.1 OpenGL ES </span><span
style='font-size:16.0pt'>개요</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES</span>는<span lang=EN-US> Work
Station</span>용으로 설계된<span lang=EN-US> OpenGL</span>을<span lang=EN-US> Embedded
System </span>환경에 맞게 경량화 시킨 그래픽 <span lang=EN-US>API</span>입니다<span lang=EN-US>.
OpenGL</span>은<span lang=EN-US> OpenGL ARB(Architecture Review Board)</span>에서 관리하고<span
lang=EN-US> OpenGL ES</span>는 크로노스 그룹<span lang=EN-US>(Khronos Group)</span>에 관리합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=508 height=181
src="et02_gles11.files/image001.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>크로노스 그룹<span lang=EN-US>, OpenGL
ARB&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>주<span lang=EN-US>)</span>크로노스 그룹은 오디오<span lang=EN-US>, </span>비디오<span
lang=EN-US>, </span>그래픽 등의 미디어에 관련된 로열티가 없는 개방형 표준<span lang=EN-US> API</span>를
제정하고 가속을 위해서 구성된 비영리 컨소시엄 그룹입니다<span lang=EN-US>. 2000</span>년에<span
lang=EN-US> 3DLabs, Discreet, Evans &amp; Sutherland, Intel, Nvidia, SGI, ATI </span>등
그래픽 및 미디어 관련 회사 중심으로 설립 되어 현재는 약<span lang=EN-US> 100</span>개의 업체가 참여하고 있으며 우리나라의
삼성<span lang=EN-US>, SK, LG </span>등도 참여하고 있는 그룹입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES </span>이외에 크로노스 그룹에서 관리하고 있는 대표적인
미디어<span lang=EN-US> API</span>는 임베디드 시스템에서 벡터 그래픽 기능을 위한<span lang=EN-US>
OpenVG (Open Vector Graphics), </span>미디어 처리의 표준인<span lang=EN-US> OpenMAX
(Open Media Acceleration Primitives), </span>그리고 임베디드 시스템의 사운드와 관련된 <span
lang=EN-US>OpenSL ES (Open Sound API form Embedded System) </span>등이 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=444 height=191
src="et02_gles11.files/image002.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>크로노스 그룹에서 관리하는<span lang=EN-US>
API&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES</span>을 포함한 크로노스 그룹에서 관리하는<span
lang=EN-US> API</span>의 가장 큰 특징은 전 세계 수십 개 이상의 업체가 참여해서 끊임없는 표준화 노력으로 이식성이 상당히 높으며
또한<span lang=EN-US> Open API</span>로서 개발에 대한 특별한 라이센스 비용을 지불하지 않아도 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>그리고 시스템의 안전을 최우선으로 설계되어 있어서 휴대 전화<span lang=EN-US>, PDA, </span>자동차<span
lang=EN-US>, </span>항공기 등과 같은<span lang=EN-US> Embedded </span>환경에서 요구되는 저 전력<span
lang=EN-US>, </span>저 메모리에서 안전한 프로그램을 만들 수가 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>특히<span lang=EN-US>, OpenGL ES</span>는 플랫폼 독립으로 설계되어 있어서<span
lang=EN-US> OpenGL ES</span>를 지원하는 환경이라면<span lang=EN-US> PC</span>에서 개발하고<span
lang=EN-US> Embedded </span>환경에서 <span lang=EN-US>2D, 3D </span>게임을 마음껏 표현할 수가 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES</span>의<span lang=EN-US> API </span>함수들은<span
lang=EN-US> Workstation </span>용 <span lang=EN-US>OpenGL</span>의 함수 또는 기능을 제거한<span
lang=EN-US> Minor </span>판이라 할 수도 있는데 이<span lang=EN-US> API</span>는<span
lang=EN-US> Mobile, Embedded </span>환경에서도 간단하게 사용되면서도 높은 품질을 유지하는 것이 목표이기 때문에 <span
lang=EN-US>Work station&nbsp;</span>용 라이브러리에서 잘 사용이 안되거나<span lang=EN-US>
Embedded </span>환경에서 필요하지 않는 함수들은 포함되지 않게 되었습니다<span lang=EN-US>. </span>또한 일부 플랫폼들은
표준<span lang=EN-US> OpenGL ES </span>함수 이외에 자신의 하드웨어 성능을 올릴 수 있는 함수들을 <span
lang=EN-US>ARB</span>와 비슷한 형태로 제공해서 수준 높은 화면의 품질을 구성할 수 있도록 도와주기도 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>현재<span lang=EN-US>, 3D </span>가속 칩 셋이 포함된 거의 모든 모바일 기기들은<span
lang=EN-US> OpenGL ES</span>를 지원하고 있습니다<span lang=EN-US>. NVIDIA, AMD, Power VR</span>의
경우<span lang=EN-US>, </span>모바일 뿐만 아니라<span lang=EN-US> PC</span>에서도 작업할 수 있는 라이브러리를
제공하고 있어서 여러분이 어느 정도<span lang=EN-US> OpenGL</span>에 대한 개념만 있으면 모바일에서도 쉽게 적응할 수 있도록<span
lang=EN-US> SDK</span>와 예제들이 잘 구성되어 있습니다<span lang=EN-US>. </span>그리고 <span
lang=EN-US>OpenGL ES</span>에 대한 수 많은 문서<span lang=EN-US>, </span>예제<span
lang=EN-US>, </span>토론 그룹들이 전 세계에 존재하고 있어서<span lang=EN-US> PC </span>환경에서 개발하고<span
lang=EN-US> Embedded </span>기기에 이식하기가 무척 수월합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이처럼<span lang=EN-US> OpenGL ES</span>는<span lang=EN-US>
Workstation</span>용과 호환성이 어느 정도 있어서<span lang=EN-US> PC</span>에서 개발하고<span
lang=EN-US> Embedded</span>용으로 쉽게 이식성이 높으며<span lang=EN-US>, </span>수많은 개발자와 커뮤니티의
노력으로 안정적이고<span lang=EN-US>, </span>범용적인 그래픽 라이브러리로 자리잡고 있어서<span lang=EN-US>
OpenGL ES </span>사용은 현재의 <span lang=EN-US>Embedded </span>환경에서<span lang=EN-US>
3D </span>게임을 만들기 위해서 가장 훌륭한 선택이라 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>간단히<span lang=EN-US> OpenGL ES</span>의 특징을 열거해보았는데 본격적으로<span
lang=EN-US> OpenGL ES </span>대해서 알아 봅시다<span lang=EN-US>. Embedded </span>용<span
lang=EN-US> OpenGL ES</span>는 크게<span lang=EN-US> 1.x</span>버전과<span
lang=EN-US> 2.x </span>두 종류가 있는데 현재 가장 많이 사용되는<span lang=EN-US> 1.x</span>에 대해서
살펴보고 다음<span lang=EN-US>, </span>프로그램 가능한 파이프라인으로 구성된<span lang=EN-US> 2.X</span>을
중심으로 강의를 진행하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>12.2 EGL(</span><span
lang=EN style='font-size:16.0pt'>Embedded-System Graphics Library)</span><span
lang=EN style='font-size:16.0pt'> </span><span style='font-size:16.0pt'>과<span
lang=EN-US> Framework</span></span></p>

<p class=MsoNormal><b><span lang=EN-US>-EGL </span>개요<span lang=EN-US>-</span></b></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES</span>는<span lang=EN-US> 3D </span>그래픽
처리에 대한<span lang=EN-US> API </span>입니다<span lang=EN-US>. </span>그런데 대상 기기들 모두가 같은
환경<span lang=EN-US>, </span>같은 성능을 가질 수는 없습니다<span lang=EN-US>. </span>따라서<span
lang=EN-US> OpenGL ES</span>가 실행될 수 있도록 일정한 환경을 만들어 주어야 합니다<span lang=EN-US>. </span>앞서
우리는<span lang=EN-US> Windows </span>환경에서<span lang=EN-US> OpenGL</span>를 사용하기 위해서<span
lang=EN-US> wgl</span>로 시작되는 위글<span lang=EN-US>(wgl) </span>함수들을 사용해서<span
lang=EN-US> OpenGL</span>을 사용할 수 있도록 환경을 만들었습니다<span lang=EN-US>. </span>마찬 가지로<span
lang=EN-US> Embedded </span>환경에서도 위글 함수들과 같이 환경을 조성하는 함수들이 필요한데 이 역할을 수행하도록 권장하는
것이<span lang=EN-US> EGL</span>입니다<span lang=EN-US>. </span></p>

<p class=MsoNormal>크로노스 그룹에서<span lang=EN-US> EGL </span><span lang=EN>(Embedded-System
Graphics Library)</span>은<span lang=EN-US> Embedded </span>시스템의 그래픽 라이브러리로서 <span
lang=EN>OpenGL ES </span>또는 <span lang=EN>OpenVG</span>와 같은 <span lang=EN>Khronos</span>의<span
lang=EN> rendering API</span>와 시스템 하부의 렌더링 사이에 있는 <span lang=EN-US>interface</span>로
정의하고 있습니다<span lang=EN-US>. </span>구체적으로<span lang=EN> EGL</span>은 <span
lang=EN>graphics context </span>관리하고<span lang=EN>, </span>서피스와 버퍼를 바인딩하며<span
lang=EN>, </span>렌더링 동기화를 제어 합니다<span lang=EN>. </span>또한 고 성능 렌더링 하드웨어 가속<span
lang=EN>, </span>다른 <span lang=EN>Khronos APIs</span>를 사용한<span lang=EN> 2D </span>또는<span
lang=EN> 3D</span>에 대한 혼합 모드 렌더링을 만들어 냅니다<span lang=EN>.</span></p>

<p class=MsoNormal><span lang=EN-US>EGL</span>은 일종의 권장사항이기 때문에 아이폰<span
lang=EN-US>(iPhone)</span>과 같이<span lang=EN-US> EGL</span>을 대신 다른 형태로 렌더링 상태를 만드는
경우도 있습니다<span lang=EN-US>. </span>하지만<span lang=EN-US> EGL</span>이 지원이 되는 플랫폼이라면<span
lang=EN-US> PC</span>에서 사용한 코드를 수정 없이 그대로<span lang=EN-US> Embedded </span>기기에 올릴
수 있기 때문에 편의를 위해서 대부분의 플랫폼 제조사는 이를 지원하고 있습니다<span lang=EN-US>. </span>때로는<span
lang=EN-US> Embedded </span>기기만 지원되기도 하지만 이런 경우에도 수정이 필요한 부분이 몇 줄 안되기 때문에 큰 불편은
없습니다<span lang=EN-US>. </span>참고로 리눅스에서도<span lang=EN-US> EGL, WGL</span>에 해당하는<span
lang=EN-US> GLX</span>가 존재합니다<span lang=EN-US>. GLX</span>는<span lang=EN-US>
X-window </span>환경에서 구현이 되며 사용법은<span lang=EN-US> EGL, WGL</span>과 거의 같으므로 알아두는
것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><b><span lang=EN-US>-OpenGL ES SDK-</span></b></p>

<p class=MsoNormal>먼저 여러분은 <span lang=EN-US>OpenGL ES</span>를 기반으로 프로그램을 만들기 위해서<span
lang=EN-US> SDK</span>를 설치해야 합니다<span lang=EN-US>. Mac</span>을 가진 분들이라면 아이폰<span
lang=EN-US> SDK</span>를 설치하면 됩니다<span lang=EN-US>. Nvidia, ADM, Imagination</span>과
같은 그래픽 제조사들은<span lang=EN-US> OpenGL ES</span>를 위한<span lang=EN-US> SDK</span>를
지원하고 있는데<span lang=EN-US> Nvidia </span>사는 <span lang=EN-US>SDK </span>사용 승인 절차가
필요하고 자사의 그래픽 카드에서만 동작으로 하도록 구성되어 있습니다<span lang=EN-US>. AMD</span>는<span
lang=EN-US> OpenGL ES 2.0</span>만 지원되지만 공개되어 있어서 사용하기 좋았는데 얼마 전에<span
lang=EN-US> AMD </span>사이트에서 링크를 해제해 버렸습니다<span lang=EN-US>. Imagination </span>은<span
lang=EN-US> OpenGL 1.0, 1.1, 2.0 </span>에 대한<span lang=EN-US> SDK</span>를 배포하고 있을
정도로 다른 어느 회사보다<span lang=EN-US> OpenGL ES</span>에 대해서 가장 적극적으로 지원하는 회사라 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>국내의 경우 <span lang=EN-US>CAANOO</span>를 만든<span lang=EN-US>
GPH (Game Park Holdings) </span>회사에서<span lang=EN-US> GPH SDK </span>안에 윈도우<span
lang=EN-US>, </span>리눅스<span lang=EN-US>, CAANOO</span>용<span lang=EN-US>
OpenGL ES</span>를 포함해서 배포하고 있습니다<span lang=EN-US>. GPH SDK</span>는 얼마 전까지<span
lang=EN-US> AMD</span>와 동일하게<span lang=EN-US> PC </span>개발 환경에서는<span
lang=EN-US> OpenGL 1.5</span>를 사용했다가 최근에 그래픽 칩 셋을 <span lang=EN-US>Imagination</span>으로
바꾸면서<span lang=EN-US> SDK</span>에 포함된 <span lang=EN-US>OpenGL ES </span>라이브러리도 바꾸었습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>GPH </span>이외에 삼성에서<span lang=EN-US> bada
OS</span>에도<span lang=EN-US> OpenGL ES</span>가 포함되어 있습니다<span lang=EN-US>. </span>다소
복잡한<span lang=EN-US> namespace</span>와<span lang=EN-US> Eclipse</span>를 개조한<span
lang=EN-US> IDE</span>는<span lang=EN-US> c/c++ </span>개발자에게 이질감을 주지만 이것은<span
lang=EN-US> bada</span>가 개발자의 편의를 위해서 <span lang=EN-US>nucleus tool chain</span>와
윈도우 환경을 통합했기 때문입니다<span lang=EN-US>. </span>이외에 닌텐도 등도 비공식적인<span lang=EN-US>
SDK</span>가 인터넷에 존재하고 있고<span lang=EN-US>, </span>안드로이드의<span lang=EN-US> NDK</span>를
사용한다면<span lang=EN-US> OpenGL ES</span>를 충분히 실습할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이중에서 추천하고 싶은<span lang=EN-US> SDK</span>로는 <span lang=EN-US>Imagination,
GPH, AMD</span>라 할 수 있습니다<span lang=EN-US>. </span>특히<span lang=EN-US>, GPH SDK</span>는
게임용으로 특화된<span lang=EN-US> DGE </span>라이브러리가 있고 이 라이브러리는 기기뿐만 아니라<span
lang=EN-US> PC</span>에서도 간단한 게임을 만들 수 있도록 그래픽스<span lang=EN-US>, </span>인풋<span
lang=EN-US>, </span>폰트<span lang=EN-US>, </span>사운드<span lang=EN-US>, </span>동영상
재생<span lang=EN-US>, </span>네트워크<span lang=EN-US>, </span>리소스 패킹 등이 잘 구성되어 있습니다<span
lang=EN-US>. DGE </span>이외에<span lang=EN-US> SDL</span>도 포함되어 있어서 처음으로 게임을 개발하는
사람들에게 여러모로 유용한 라이브러리를 제공하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>지금까지<span lang=EN-US> OpenGL ES</span>용<span lang=EN-US> SDK</span>들을
아주 간단히 소개해 드렸는데 좀더 자세한 내용은 부록에 포함된<span lang=EN-US> SDK </span>주소에서 찾기 바라며 앞으로 진행될<span
lang=EN-US> OpenGL ES 1.1</span>은 <span lang=EN-US>Imagination SDK</span>와<span
lang=EN-US> GPH SDK</span>를 사용하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><b><span lang=EN-US>-EGL </span>프로그래밍<span lang=EN-US>-</span></b></p>

<p class=MsoNormal><span lang=EN-US>PC</span>에서의<span lang=EN-US> OpenGL </span>사용에서
우리는<span lang=EN-US> WGL</span>의 가장 중요한 역할은<span lang=EN-US> Rendering Context</span>관리라
배웠습니다<span lang=EN-US>. EGL</span>도 마찬가지로 가장 큰 목적은<span lang=EN-US> OpenGL ES </span>라이브러리를
사용할 수 있도록<span lang=EN-US> Rendering</span>에 필요한<span lang=EN-US> Context, Surface
</span>등을 만드는 것입니다<span lang=EN-US>. </span>따라서 프로그램의 흐름도<span lang=EN-US> WGL</span>과
유사할 수밖에 없으며 단지 차이라면<span lang=EN-US> EGL</span>은<span lang=EN-US> WGL</span>보다 좀
더 세밀하게 나뉘어져 있다는 것입니다<span lang=EN-US>. </span>나중에 다 배우고 나서 필요하다면 기억하기 좋게<span
lang=EN-US> WGL</span>과<span lang=EN-US> EGL</span>을 표로 만들어서 비교해 보는 것도 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>어떤<span lang=EN-US> EGL </span>라이브러리를 사용하더라도 여러분은 반드시 렌더링 대상이
되는 <span lang=EN-US>EGL</span>이 요구하는 <span lang=EN-US>Native Window</span>를 만들어야
합니다<span lang=EN-US>. </span>여러분은 다음과 비슷한 형태로 플랫폼에 의존하는 윈도우<span lang=EN-US>(Native
Window)</span>를 만들 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>윈도우 생성<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:gray'>hwnd</span><span
lang=EN-US> = </span><span lang=EN-US style='color:#880000'>CreateWindow</span><span
lang=EN-US>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// window</span></p>

<p class=MsoNormal><span lang=EN-US style='color:gray'>hwnd</span><span
lang=EN-US> = </span><span lang=EN-US style='color:#880000'>malloc</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>16</span><span
lang=EN-US>*</span><span lang=EN-US style='color:red'>1024</span><span
lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// GPH SDK</span></p>

<p class=MsoNormal><span lang=EN-US style='color:gray'>hwnd</span><span
lang=EN-US> = </span><span lang=EN-US style='color:blue'>new</span><span
lang=EN-US> MyForm : public Osp::Ui::Controls::Form;&nbsp; </span><span
lang=EN-US style='color:green'>// Form</span><span style='color:green'>을 상속받는 객체</span></p>

<p class=MsoNormal><span lang=EN-US style='color:gray'>hwnd</span><span
lang=EN-US> = </span><span lang=EN-US style='color:#880000'>android_createDisplaySurface</span><span
lang=EN-US>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// android</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>간단히 윈도우 생성을 설명하면 마이크로소프트 계열은 윈도우 생성을 <span lang=EN-US>CreateWindow()
</span>함수로 만듭니다<span lang=EN-US>. GPH</span>의 <span lang=EN-US>CAANOO</span>는 기기가
고정되어 있어서 추가로<span lang=EN-US> Heap</span>에 <span lang=EN-US>16*1024 </span>영역의 공간만
만들어 주고 이 메모리를<span lang=EN-US> EGL</span>로 넘기면 됩니다<span lang=EN-US>. bada </span>플랫폼은
<span lang=EN-US>Base</span>가 <span lang=EN-US>Form </span>객체이고 이 객체가 윈도우를 대신하고
있어서 폼 객체를 윈도우로 캐스팅하면 됩니다<span lang=EN-US>. </span>안드로이드는 애플리케이션 영역에서 자동으로 생성 됩니다<span
lang=EN-US>. </span>특히 진저<span lang=EN-US>(2.3) </span>버전 이후는 <span lang=EN-US>Native
Activity</span>를 사용해서 <span lang=EN-US>JAVA </span>없이도 응용 프로그램을 만들 수 있게 되었고 이<span
lang=EN-US> Activity Life Cycle</span>에서 만들어진 윈도우를 캐스팅해서 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 직접 윈도우를 만들거나 아니면 자동으로 생성된 윈도우를 가지고 우리는 다음으로 <span
lang=EN-US>EGL</span>에 따른 디스플레이<span lang=EN-US>(EGL Display), </span>렌더링 서피스<span
lang=EN-US>(EGL Rendering Surface), </span>렌더링 컨텍스트<span lang=EN-US>(Rendering
Context)</span>를 생성하고 장면의 연출에서 후면 버퍼를 전면 버퍼로 전환인<span lang=EN-US> Flipping, </span>그리고<span
lang=EN-US> EGL </span>관련 객체들을 해제<span lang=EN-US>(Release) </span>과정을 알아야 합니다<span
lang=EN-US>. EGL </span>객체들의 생성은 아이폰을 제외한 나머지 플랫폼에서는 거의 비슷한 코드로 다음과 같은 순서로 구성되어
있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. Display </span>객체 생성</p>

<p class=MsoNormal><span lang=EN-US>2. Display </span>객체 초기화</p>

<p class=MsoNormal><span lang=EN-US>3. </span>기기에서 지원되는 프레임 버퍼<span lang=EN-US>(</span>색상<span
lang=EN-US>, </span>깊이<span lang=EN-US>, </span>스텐실<span lang=EN-US>) </span>포맷
얻기</p>

<p class=MsoNormal><span lang=EN-US>4. </span>서피스<span lang=EN-US>(Rendering
Surface) </span>생성</p>

<p class=MsoNormal><span lang=EN-US>5. </span>컨텍스트<span lang=EN-US>(Rendering
Context: RC) </span>생성</p>

<p class=MsoNormal><span lang=EN-US>6. </span>컨텍스트 활성화</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>EGL</span>을 사용해서<span lang=EN-US> RC</span>를
만드는 과정은 플랫폼 마다 거의 비슷하고<span lang=EN-US>, OpenGL ES</span>의<span lang=EN-US>
Major </span>버전이 바뀌더라도 크게 변함이 없어서 굳이 외울 필요는 없고 여러분 자신이 만든 잘 정리된 코드를 가지고 있다가 필요하면
복사해서 사용하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>여러분은<span lang=EN-US> EGL</span>과<span lang=EN-US> OpenGL</span>을
사용하기 위해서 다음과 같은 형태로<span lang=EN-US> gl.h, egl.h </span>두 개의 헤더 파일을 포함해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#include </span><span lang=EN-US style='color:fuchsia'>&lt;gles/gl.</span><span
lang=EN-US style='color:fuchsia'>h</span><span lang=EN-US style='color:fuchsia'>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#include </span><span lang=EN-US style='color:fuchsia'>&lt;gles/egl.</span><span
lang=EN-US style='color:fuchsia'>h</span><span lang=EN-US style='color:fuchsia'>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>렌더링에 필요한<span lang=EN-US> EGL </span>객체는
다음과 같이<span lang=EN-US> Native Window, Display, Surface, Context 4</span>가지가 필요합니다<span
lang=EN-US>. </span>이들 객체에 대한 변수를 다음과 같이 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>NativeWindowType</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>m_pEgWnd </span><span lang=EN-US>= </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Native Window</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>EGLDisplay</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m_pEGDsp </span><span lang=EN-US>= </span><span
lang=EN-US style='color:#A000A0'>EGL_NO_DISPLAY</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>디스플레이 객체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>EGLSurface</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m_pEGSrf </span><span lang=EN-US>= </span><span
lang=EN-US style='color:#A000A0'>EGL_NO_SURFACE</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>서피스 객체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>EGLContext</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m_pEgCtx </span><span lang=EN-US>= </span><span
lang=EN-US style='color:#A000A0'>EGL_NO_CONTEXT</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링 컨텍스트 객체</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>디스플레이<span lang=EN-US>(Native Display) </span>객체 생성은<span
lang=EN-US> eglGetDisplay() </span>함수를 사용합니다<span lang=EN-US>. </span>이 함수는 실패하면<span
lang=EN-US> NULL </span>객체를 반환합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:gray'>m_pEgDsp</span><span lang=EN-US> = </span><span lang=EN-US
style='color:#880000'>eglGetDisplay</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>EGL_DEFAULT_DISPLAY</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US> == </span><span lang=EN-US
style='color:gray'>m_pEgDsp</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglGetDisplay() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>디스플레이 객체는 생성 후에 반드시 초기화를 해야 합니다<span lang=EN-US>.
eglInitialize() </span>함수는<span lang=EN-US> EGL </span>디스플레이 객체를 초기화 하며 실패하면 <span
lang=EN-US>&quot;false&quot;</span>를 반환 합니다<span lang=EN-US>. </span>초기화 과정에서 한
부수적으로<span lang=EN-US> EGL </span>버전을 알아 낼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>EGLint</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:gray'>ver_maj</span><span lang=EN-US>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// EGL </span><span style='color:green'>주 버전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>EGLint</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:gray'>ver_min</span><span lang=EN-US>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// EGL </span><span style='color:green'>부 버전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> (!</span><span lang=EN-US
style='color:#880000'>eglInitialize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>ver_maj</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>ver_min</span><span lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglInitialize() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>디스플레이 객체를 초기화 한 후에 여러분이 원하는 프레임 버퍼의 포맷이 디스플레이 객체에서 지원 되는지 <span
lang=EN-US>eglChooseConfig() </span>함수로 확인 해야 합니다<span lang=EN-US>. </span>이 때 사용하는
단위는 비트입니다<span lang=EN-US>. </span>대부분의 기기들은 가장 무난한<span lang=EN-US> 565(red,
green, blue) </span>색상 버퍼와<span lang=EN-US> 16-bit </span>깊이 버퍼를 지원합니다<span
lang=EN-US>. </span>하지만 여기서는 좀 더 해상도가 좋은 <span lang=EN-US>'8888-16' mode</span>의
지원 여부에 대한 확인 코드를 작성해 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>_Tconfig_att</span><span lang=EN-US> { </span><span
lang=EN-US style='color:blue'>EGLint</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>a</span><span lang=EN-US>; </span><span
lang=EN-US style='color:blue'>EGLint</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>b</span><span lang=EN-US>; };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>_Tconfig_att</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>config_attrib</span><span lang=EN-US>[] =</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_RED_SIZE</span><span
lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:red'>8</span><span lang=EN-US>},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 8-bit </span><span style='color:green'>빨강</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_GREEN_SIZE</span><span
lang=EN-US>,&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:red'>8</span><span
lang=EN-US>},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 8-bit </span><span style='color:green'>초록</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_BLUE_SIZE</span><span
lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:red'>8</span><span
lang=EN-US>},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 8-bit </span><span style='color:green'>파랑</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_ALPHA_SIZE</span><span
lang=EN-US>,&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:red'>8</span><span
lang=EN-US>},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 8-bit </span><span style='color:green'>알파</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_DEPTH_SIZE</span><span
lang=EN-US>,&nbsp;&nbsp; </span><span lang=EN-US style='color:red'>16</span><span
lang=EN-US>},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 8-bit </span><span style='color:green'>깊이</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_SURFACE_TYPE</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>EGL_WINDOW_BIT</span><span
lang=EN-US>},&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>서피스 타입</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_NONE</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:#A000A0'>EGL_NONE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>},&nbsp; </span><span lang=EN-US style='color:green'>//
End Mark</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 작성된 프레임 버퍼의 지원 여부는<span lang=EN-US> eglChooseConfig() </span>함수를
다음과 같이 사용합니다<span lang=EN-US>. </span>이 함수는 디스플레이에 사용자가 지정한 프레임버퍼의 색상<span
lang=EN-US>, </span>깊이 등이 지원 되는지 판단하는 함수이며 성공하게 되면 주어진 조건에 맞는 개수<span
lang=EN-US>(matching number)</span>를 반환합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>eglChooseConfig </span>함수는 실패하면 <span
lang=EN-US>&quot;false&quot; </span>또는<span lang=EN-US> 0</span>을 반환합니다<span
lang=EN-US>. </span>또한 함수가 처리를 성공하더라도 <span lang=EN-US>matching </span>되는 값이<span
lang=EN-US> 0</span>이 될 수 있어서 함수의 반환<span lang=EN-US> matching </span>값 둘 다 확인하도록
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>MAX_CONFIG</span><span lang=EN-US> = </span><span
lang=EN-US style='color:red'>16</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>match</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>EGLConfig</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>eglConf</span><span lang=EN-US>[</span><span
lang=EN-US style='color:gray'>MAX_CONFIG</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> (!</span><span lang=EN-US
style='color:#880000'>eglChooseConfig</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
(</span><span lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>EGLint</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:gray'>config_attrib</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>eglConf</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], </span><span
lang=EN-US style='color:#A000A0'>MAX_CONFIG</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>match</span><span lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglChooseConfig() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>&gt;</span><span lang=EN-US
style='color:gray'>match</span><span lang=EN-US>) </span><span lang=EN-US
style='color:green'>// No Matching</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglChooseConfig() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>게임기로 특화된<span lang=EN-US> Embedded </span>기기들은 색상버퍼와 깊이 버퍼가 특정
값으로 고정되어 있는 경우도 있습니다<span lang=EN-US>. CAANOO</span>의 경우 <span lang=EN-US>8888-16bit
</span>또는<span lang=EN-US> 565-16bit</span>로 고정되어 있어서 서피스 타입만 확인하는 <span
lang=EN-US>config</span>를 작성하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>_Tconfig_att</span><span lang=EN-US> { </span><span
lang=EN-US style='color:blue'>EGLint</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>a</span><span lang=EN-US>; </span><span
lang=EN-US style='color:blue'>EGLint</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>b</span><span lang=EN-US>; };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>_Tconfig_att</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>config_attrib</span><span lang=EN-US>[] =</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_SURFACE_TYPE</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>EGL_WINDOW_BIT </span><span
lang=EN-US>},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
</span><span lang=EN-US style='color:#A000A0'>EGL_NONE</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:#A000A0'>EGL_NONE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>},</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>디스플레이에서 사용자가 정의한 포맷이 지원이 확인 되면 다음으로
렌더링을 위한 서피스 객체를 <span lang=EN-US>eglCreateWindowSurface() </span>함수로 생성합니다<span
lang=EN-US>. </span>이 함수는 성공하면 서피스 객체를 반환하고 실패하면<span lang=EN-US> NULL</span>을 반환합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:gray'>m_pEgSrf</span><span lang=EN-US> = </span><span lang=EN-US
style='color:#880000'>eglCreateWindowSurface</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>eglConf</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:gray'>m_hWnd</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>EGLint</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:gray'>config_attrib</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US> == </span><span lang=EN-US
style='color:gray'>m_pEgSrf</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>주어진 환경 변수로 실패할
경우 <span lang=EN-US>default</span>로 다시 시도</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>eglCreateWindowSurface</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>eglConf</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], </span><span
lang=EN-US style='color:gray'>m_hWnd</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US> == </span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglCreateWindowSurface() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>디스플레이<span lang=EN-US>, </span>서피스
객체 생성 다음으로 렌더링 컨텍스트를 생성합니다<span lang=EN-US>. </span>렌더링 컨텍스트 또한 서피스와 마찬가지로 사용자가<span
lang=EN-US> eglChooseConfig() </span>함수에서 지원되는<span lang=EN-US> config </span>값을
사용해서 만듭니다<span lang=EN-US>. eglCreateContext() </span>함수는 컨텍스트 객체를 생성하며 실패할 경우<span
lang=EN-US> 'NULL'</span>을 반환합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:gray'>m_pEgCtx</span><span lang=EN-US> = </span><span lang=EN-US
style='color:#880000'>eglCreateContext</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>eglConf</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>EGL_NO_CONTEXT</span><span
lang=EN-US>, (</span><span lang=EN-US style='color:blue'>const</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>EGLint</span><span
lang=EN-US>*)</span><span lang=EN-US style='color:gray'>config_attrib</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US> == </span><span lang=EN-US
style='color:gray'>m_pEgCtx</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>주어진 환경 변수로 실패할
경우 <span lang=EN-US>default</span>로 다시 시도</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m_pEgCtx</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#880000'>eglCreateContext</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>eglConf</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US> == </span><span
lang=EN-US style='color:gray'>m_pEgCtx</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglCreateContext() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES</span>는 워크스테이션용<span lang=EN-US>
OpenGL</span>과 비슷하게 여러 렌더링 컨텍스트 생성할 수 있고 이 중에서 하나의 컨텍스트를 선택해서 사용할 수 있습니다<span
lang=EN-US>. eglMakeCurrent() </span>함수는 현재 활성화되어 있는 디스플레이<span lang=EN-US>, </span>서피스
객체에 사용할 컨텍스트를 지정하는 함수입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if(</span><span lang=EN-US>!</span><span lang=EN-US
style='color:#880000'>eglMakeCurrent</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>,</span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US>,</span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US>,</span><span
lang=EN-US style='color:gray'>m_pEgCtx</span><span lang=EN-US>))</span><span
lang=EN-US style='color:green'> // </span><span style='color:green'>서피스에 컨텍스트 연결</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglMakeCurrent() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>보통 렌더링 횟수는 모니터의 재생률<span lang=EN-US>(Refresh rate)</span>에 묶여
있는 경우가 많습니다<span lang=EN-US>. </span>대부분의 게임프로그램은 모니터의 재생률에 관계없이 화면에 출력되는 즉시 모드<span
lang=EN-US>(immediately mode)</span>를 대부분 선택합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>eglSwapInterval() </span>함수는 모니터 동기화 또는 즉시 모드를
설정하는 함수입니다<span lang=EN-US>. </span>이 함수는 모든 기기가 지원하지는 않고 경우에 따라 에러 반환 없이 기기가 멈출
수도 있으니 주의해서 사용하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if(</span><span lang=EN-US>!</span><span lang=EN-US
style='color:#880000'>eglSwapInterval</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>)) </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>즉시 그리기 설정 <span
lang=EN-US>==&gt; 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>printf</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;eglSwapInterval() Failed\n&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>-1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>안드로이드 플랫폼의 경우 초기화 과정에서 렌더링 서피스의 폭과
너비를 가져와 뷰포트<span lang=EN-US>(Viewport)</span>를 초기화 할 수도 있습니다<span lang=EN-US>.
eglQuerySurface() </span>함수는 서피스의 정보를 반환하며 이 함수를 사용해서 뷰포트를 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>eglQuerySurface</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>EGL_WIDTH</span><span lang=EN-US>,&nbsp; &amp;</span><span
lang=EN-US style='color:gray'>m_ScnW</span><span lang=EN-US>);</span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>서피스 너비</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>eglQuerySurface</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>EGL_HEIGHT</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>m_ScnH</span><span lang=EN-US>);</span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>서피스 높이</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glViewport</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_ScnW</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_ScnH</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>뷰포트 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게<span lang=EN-US> EGL </span>객체 생성이 성공했으면 다음으로<span
lang=EN-US> Flipping </span>작업을 정리해야 합니다<span lang=EN-US>. OpenGL ES</span>는 간단히<span
lang=EN-US> eglSwapBuffers() + glFlush() </span>함수를 사용해서<span lang=EN-US>
Flipping </span>을 수행합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>eglSwapBuffers</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glFlush</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>생성 과정과 더불어 중요한 것이<span lang=EN-US> EGL </span>객체의 해제입니다<span
lang=EN-US>. EGL </span>객체는 해제하기 전에 먼저 디스플레이 객체에 대해서 렌더링 서피스와 컨텍스트를 무효<span
lang=EN-US>(NULL </span>또는<span lang=EN-US> No Surface, No Context)</span>로 지정해야
합니다<span lang=EN-US>. </span>그리고 나서<span lang=EN-US> eglDestroyContext (),
eglDestroySurface(), eglTerminate() </span>함수를 사용해서 컨텍스트<span lang=EN-US>, </span>서피스<span
lang=EN-US>, </span>디스플레이 순으로 생성과 반대의 과정으로 해제합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// </span><span
style='color:green'>컨텍스트 무효 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>eglMakeCurrent</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>EGL_NO_SURFACE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>EGL_NO_SURFACE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>EGL_NO_CONTEXT</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>eglDestroyContext</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_pEgCtx</span><span lang=EN-US>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링 컨텍스트 해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>eglDestroySurface</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_pEgSrf</span><span lang=EN-US>); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>서피스 해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>eglTerminate</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>m_pEgDsp</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>디스플레이 해제</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 가장 일반적인 방법으로<span lang=EN-US> OpenGL ES API</span>를 사용할
수 있도록 디스플레이<span lang=EN-US>, </span>서피스<span lang=EN-US>, </span>렌더링 컨텍스트 객체를 생성하고
환경을 만드는 방법을 살펴보았습니다<span lang=EN-US>. </span>다음으로 아이폰용<span lang=EN-US> EAGL</span>입니다<span
lang=EN-US>. &nbsp;</span>아이폰에 관련된 많은 서적이 있어서 여기서는 간단하게 넘어가도록 하겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>아이폰용<span lang=EN-US> EAGL</span>은 윈도우 서피스 생성은<span
lang=EN-US> View </span>객체 내부에서 자동으로 처리되며 프로그램은 렌더링 컨텍스트를 생성하는 것부터 시작합니다<span
lang=EN-US>. </span>아이폰에서 <span lang=EN-US>OpenGL ES API</span>를 사용하려면 렌더링 컨텍스트
이외에 프레임 버퍼<span lang=EN-US>(Frame buffer)</span>와 색상 버퍼<span lang=EN-US>(Color
buffer)</span>를 만들어야 합니다<span lang=EN-US>. </span>이들 객체는 <span lang=EN-US>OpenGL
ES</span>의 텍스처 객체<span lang=EN-US>, </span>버텍스 버퍼 객체처럼<span lang=EN-US>
unsigned int </span>형으로 선언합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>unsigned int </span><span lang=EN-US style='color:gray'>m_fbFrame
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>디폴트 프레임 버퍼</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>unsigned int </span><span lang=EN-US style='color:gray'>m_fbColor
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링에 대한 색상 버퍼</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>아이폰에서<span lang=EN-US> OpenGL </span>라이브러리를 편하게 사용하려면<span
lang=EN-US> Object-C </span>기반의 <span lang=EN-US>X-code </span>라이브러리를 사용해야 합니다<span
lang=EN-US>. </span>다행히도 여러분은 소스 파일의 확장자를<span lang=EN-US> '.c' </span>는<span
lang=EN-US> .m '.cpp' </span>대신<span lang=EN-US> '.mm'</span>으로 변경하면<span
lang=EN-US> Object-C</span>에서<span lang=EN-US> c/c++ </span>문법과 <span
lang=EN-US>X-code</span>의 라이브러리를 사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>EAGL </span>라이브러리를 사용하기 위해서 확장자를<span
lang=EN-US> '.m' </span>또는<span lang=EN-US> '.mm'</span>으로 바꾼 후에 헤더 파일을<span
lang=EN-US> #include </span>대신<span lang=EN-US> Object-C</span>의<span
lang=EN-US> Directive</span>인 <span lang=EN-US style='color:blue'>'#import'</span>를
사용해서 <span lang=EN-US>EAGL, ES </span>등을 포함 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>#import
</span><span lang=FR style='color:fuchsia'>&lt;QuartzCore/QuartzCore.</span><span
lang=FR style='color:fuchsia'>h</span><span lang=FR style='color:fuchsia'>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>#import
</span><span lang=FR style='color:fuchsia'>&lt;OpenGLES/EAGL.</span><span
lang=FR style='color:fuchsia'>h</span><span lang=FR style='color:fuchsia'>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:blue'>#import
</span><span lang=DE style='color:fuchsia'>&lt;OpenGLES/ES1/gl.</span><span
lang=DE style='color:fuchsia'>h</span><span lang=DE style='color:fuchsia'>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:blue'>#import
</span><span lang=DE style='color:fuchsia'>&lt;OpenGLES/ES1/glext.</span><span
lang=DE style='color:fuchsia'>h</span><span lang=DE style='color:fuchsia'>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:blue'>&nbsp;</span></p>

<p class=MsoNormal>아이폰은 디스플레이<span lang=EN-US>, </span>윈도우 서피스 없이 <span
lang=EN-US>Main View</span>를 가지고 바로 렌더링 컨텍스트를 만들기 때문에 <span lang=EN-US>Main
View</span>가 생성되고 초기화 될 때 렌더링 컨텍스트 객체를 생성하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>여러분은 <span lang=EN-US>X-code</span>의 프로젝트 생성 위저드<span
lang=EN-US>(Wizard)</span>로 <span lang=EN-US>OpenGL ES</span>용 응용프로그램을 생성하면<span
lang=EN-US> Main View </span>코드에<span lang=EN-US> &quot;initWithCoder:(NSCoder*)coder&quot;
</span>함수 안에서 렌더링 컨텍스트 생성에 대한 다음과 같은 코드를 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE style='color:blue'>EAGLContext</span><span
lang=DE>* </span><span lang=DE style='color:gray'>pEgCtx</span><span lang=DE> =
</span><span lang=DE style='color:red'>NULL</span><span lang=DE>;</span></p>

<p class=MsoNormal><span lang=DE>…</span></p>

<p class=MsoNormal><span lang=DE style='color:gray'>pEgCtx</span><span lang=DE>
= [[</span><span lang=DE style='color:blue'>EAGLContext</span><span lang=DE> </span><span
lang=DE style='color:#880000'>alloc</span><span lang=DE>] </span><span lang=DE
style='color:#880000'>initWithAPI</span><span lang=DE>:</span><span lang=DE
style='color:#A000A0'>kEAGLRenderingAPIOpenGLES1</span><span lang=DE>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>최신<span lang=EN-US> SDK</span>는 <span lang=EN-US>OpenGL ES
2.0 </span>기반으로 코드가 구성되어 있어서 <span lang=EN-US>kEAGLRenderingAPIOpenGLES2</span>로
되어 있습니다<span lang=EN-US>. 1.x </span>버전<span lang=EN-US> EAGL</span>를 사용하려면 숫자<span
lang=EN-US> 2</span>를<span lang=EN-US> 1</span>로 바꾸어 <span lang=EN-US>kEAGLRenderingAPIOpenGLES1</span>으로
변경합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>1.x </span>버전에서 아이폰의<span lang=EN-US> EAGL </span>관련
함수와 상수는 <span lang=EN-US>&quot;OES&quot; </span>또는<span lang=EN-US>
&quot;_OES&quot; </span>접미사가 붙습니다<span lang=EN-US>. </span>위저드에서<span
lang=EN-US> 2.x </span>기반으로 작성된 코드를<span lang=EN-US> 1.x</span>으로 변경할 경우 <span
lang=EN-US>kEAGLRenderingAPIOpenGLES1</span>으로 변경한 후에 문법 에러를 찾아가면서<span
lang=EN-US> &quot;OES&quot; </span>접미사를 붙이면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링 컨텍스트 생성이 성공했다면<span lang=EN-US> eglMakeCurrent() </span>함수
사용할 때와 비슷하게 이 컨텍스트를 활성화 해야 합니다<span lang=EN-US>. </span>간단히 <span lang=EN-US>setCurrentContext
</span>함수에 컨텍스트 객체를 전달하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;[</span><span lang=EN-US
style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>setCurrentContext</span><span lang=EN-US>:</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>컨텍스트 객체 생성 후에 다음으로 프레임 버퍼<span lang=EN-US>, </span>색상 버퍼를 생성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glGenFramebuffersOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
&amp;</span><span lang=EN-US style='color:gray'>m_fbFrame</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glGenRenderbuffersOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
&amp;</span><span lang=EN-US style='color:gray'>m_fbColor</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이들 프레임 버퍼<span lang=EN-US>, </span>색상버퍼를
현재의<span lang=EN-US> Context</span>에 바인딩 하고<span lang=EN-US>, </span>색상 버퍼를 프레임
버퍼에 연결합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindFramebufferOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_OES</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_fbFrame</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindRenderbufferOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_fbColor</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glFramebufferRenderbufferOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_OES</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>GL_COLOR_ATTACHMENT0_OES</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span
lang=EN-US>, </span><span lang=EN-US style='color:gray'>m_fbColor</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>때로는<span lang=EN-US> EGL </span>성공을
확인하기 위해서<span lang=EN-US> glClearColor(), glClear(), glSwapBuffers() </span>함수를
호출해서 화면의 색상이 변경되는지 눈으로 확인할 수 있도록 이 함수들을 추가할 수도 있는데</p>

<p class=MsoNormal style='word-break:keep-all'>이 경우 기기가 에러 반환 없이 멈출 수 있습니다<span
lang=EN-US>. OpenGL ES API </span>사용은 <span lang=EN-US>EAGL Layer </span>객체를 렌더링
컨텍스트 객체에 전달한 후에 사용하는 것이 가장 안전합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>EAGL Layer </span>객체 전달 시점은 화면이<span
lang=EN-US> Resize</span>될 때 전달합니다<span lang=EN-US>. View </span>원시 코드 안에<span
lang=EN-US> &quot;- (void)layoutSubviews&quot; </span>함수 안에 <span lang=EN-US>resize
</span>될 때<span lang=EN-US> Layer </span>객체를 컨텍스트 객체에 전달하고 색상 버퍼<span
lang=EN-US>, </span>프레임 버퍼를 다시 바인딩 하고 있음을 볼 수 있습니다<span lang=EN-US>. EAGL</span>를
상세히 아는 것도 좋지만 내공이 쌓이면 그 때 다시 공부하고 대충 다음과 같이 정리해서 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>EAGLContext</span><span
lang=EN-US>* </span><span lang=EN-US style='color:gray'>pCtx</span><span
lang=EN-US>&nbsp; = (</span><span lang=EN-US style='color:blue'>EAGLContext</span><span
lang=EN-US>*)</span><span lang=EN-US style='color:gray'>pEgCtx</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>CAEAGLLayer</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>layer</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:blue'>CAEAGLLayer</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:gray'>pLayer</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>컨텍스트에 레이어 연결</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>[</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>renderbufferStorage</span><span lang=EN-US>:</span><span
lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>fromDrawable</span><span lang=EN-US>:</span><span
lang=EN-US style='color:gray'>layer</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if(</span><span lang=EN-US style='color:#880000'>glCheckFramebufferStatusOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_OES</span><span
lang=EN-US>) != </span><span lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_COMPLETE_OES</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>EAGL</span>의 렌더링 컨텍스트<span lang=EN-US>, </span>프레임
버퍼<span lang=EN-US>, </span>색상 버퍼를 생성하고 레이어를 컨텍스트에 연결하는 방법을 간단히 살펴 보았습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>EAGL</span>은 생성에서도 차이가 있듯이<span lang=EN-US>
Flipping</span>에도 다른<span lang=EN-US> EGL</span>과 차이가 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span>간단히 알아보았는데<span lang=EN-US>
EAGL</span>는 다른 일반적인<span lang=EN-US> EGL</span>과 차이가 하나 더 있습니다<span
lang=EN-US>. </span>보통의<span lang=EN-US> EGL</span>는 워크스테이션용<span lang=EN-US>
OpenGL</span>처럼 전면버퍼와 후면 버퍼 교체를 <span lang=EN-US>eglSwapBuffers() </span>함수를 사용하지만<span
lang=EN-US> EAGL</span>은 <span lang=EN-US>EAGLContext </span>의<span lang=EN-US>
presentRenderbuffer </span>함수를 사용합니다<span lang=EN-US>.</span><span lang=EN-US> </span>물론
프레임 버퍼<span lang=DE>, </span>색상 버퍼가 렌더링 컨텍스트에 바인딩 된 상태에서 입니다<span lang=DE>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>[</span><span lang=DE style='color:gray'>pCtx</span><span
lang=DE> </span><span lang=DE style='color:#880000'>presentRenderbuffer</span><span
lang=DE>:</span><span lang=DE style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span
lang=DE>];</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal>아이폰도 비슷하게 먼저 프레임 버퍼<span lang=EN-US>, </span>색상 버퍼를 해제하고 현재의
렌더링 컨텍스트를<span lang=EN-US> nil</span>로 설정하고 나서 컨텍스트 객체를 해제합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glDeleteFramebuffersOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US>&amp;</span><span lang=EN-US style='color:gray'>FrameBuffer</span><span
lang=EN-US>); &nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>프레임 버퍼 해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glDeleteRenderbuffersOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US>&amp;</span><span lang=EN-US style='color:gray'>ColorBuffer</span><span
lang=EN-US>); &nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>색상</span> <span style='color:green'>버퍼 해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if(</span><span lang=EN-US>[</span><span lang=EN-US
style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>currentContext</span><span lang=EN-US>] == </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>) &nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>활성화된 서피스</span><span
lang=EN-US>, </span><span style='color:green'>해제할 서피스 비교 </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>setCurrentContext</span><span lang=EN-US>:</span><span
lang=EN-US style='color:blue'>nil</span><span lang=EN-US>];  </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>컨텍스트 무효 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>[</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>release</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>뷰포트 설정</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a
href="es00_egl_iphone_init1.zip">es00_egl_iphone_init1.zip</a></span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>OpenGL ES</span>는 아이폰 이외에<span lang=DE> 3D</span>가
지원되는<span lang=DE> Embedded </span>기기에 대부분 지원 됩니다<span lang=DE>. </span>만약 여러분이<span
lang=DE> Windows, Linux, </span>아이폰<span lang=DE>, </span>안드로이드 등의<span
lang=DE> Cross Compile</span>를 생각하고 있다면 아이폰 때문에 모든 확장자를<span lang=DE> .mm</span>으로
변경할 필요는 없습니다<span lang=DE>.</span></p>

<p class=MsoNormal>여러분은<span lang=DE> EAGL</span>이 사용되는 부분만<span lang=DE> mm </span>파일로
변경하면 되며<span lang=DE>, EAGL</span>에 해당하는 부분을 <span lang=DE>Destroy, Create,
Resize, Present </span>네 개의 함수로 만들고 이것을 빌드 하도록 구성합니다<span lang=DE>.</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#if defined</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>__APPLE__</span><span lang=EN-US>) || </span><span
lang=EN-US style='color:blue'>defined(__IPHONE__</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp; </span><span
lang=FR style='color:blue'>#import </span><span lang=FR style='color:fuchsia'>&lt;QuartzCore/QuartzCore.h&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp; </span><span
lang=FR style='color:blue'>#import </span><span lang=FR style='color:fuchsia'>&lt;OpenGLES/EAGL.h&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp; </span><span
lang=DE style='color:blue'>#import </span><span lang=DE style='color:fuchsia'>&lt;OpenGLES/ES1/gl.h&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp; </span><span
lang=DE style='color:blue'>#import </span><span lang=DE style='color:fuchsia'>&lt;OpenGLES/ES1/glext.h&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#endif</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>typedef unsigned
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UINT;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// EAGL </span><span style='color:green'>객체 해제 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>XcodeEglDestroy</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>** </span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pFrameBuffer</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pColorBuffer</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US>*)(*</span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(*</span><span
lang=EN-US style='color:gray'>pFrameBuffer</span><span lang=EN-US>) &nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Frame buffer </span><span style='color:green'>해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glDeleteFramebuffersOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
</span><span lang=EN-US style='color:gray'>pFrameBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(*</span><span
lang=EN-US style='color:gray'>pColorBuffer</span><span lang=EN-US>) &nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Color buffer </span><span style='color:green'>해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glDeleteRenderbuffersOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
</span><span lang=EN-US style='color:gray'>pColorBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링에 설정되어 있는
<span lang=EN-US>context</span>가 주어진<span lang=EN-US> context </span>이면<span
lang=EN-US> NULL</span>로 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if(</span><span lang=EN-US>[</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>currentContext</span><span lang=EN-US>] == </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>setCurrentContext</span><span lang=EN-US>:</span><span
lang=EN-US style='color:blue'>nil</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Context </span><span style='color:green'>해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>release</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>주어진 값들을<span
lang=EN-US> 0 </span>또는<span lang=EN-US> NULL </span>로 초기화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *</span><span
lang=EN-US style='color:gray'>pColorBuffer</span><span lang=EN-US> = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *</span><span
lang=EN-US style='color:gray'>pFrameBuffer</span><span lang=EN-US> = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *</span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// EAGL </span><span style='color:green'>객체 생성 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>XcodeEglCreate</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>** </span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pFrameBuffer</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pColorBuffer</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US> = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// View </span><span style='color:green'>객체에서<span
lang=EN-US> Context </span>얻기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US> = [[</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>alloc</span><span lang=EN-US>] </span><span
lang=EN-US style='color:#880000'>initWithAPI</span><span lang=EN-US>:</span><span
lang=EN-US style='color:#A000A0'>kEAGLRenderingAPIOpenGLES1</span><span
lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if(</span><span lang=EN-US>!</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링의<span
lang=EN-US> Context </span>설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if(</span><span lang=EN-US>![</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>setCurrentContext</span><span lang=EN-US>:</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>])</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>프레임 버퍼<span
lang=EN-US>, </span>색상 버퍼 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glGenFramebuffersOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:gray'>pFrameBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glGenRenderbuffersOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>pColorBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링<span
lang=EN-US> Context</span>에 바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glBindFramebufferOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_OES</span><span lang=EN-US>, *</span><span
lang=EN-US style='color:gray'>pFrameBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glBindRenderbufferOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span lang=EN-US>, *</span><span
lang=EN-US style='color:gray'>pColorBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>프레임 버퍼에 색상 버퍼
바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glFramebufferRenderbufferOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_OES</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>GL_COLOR_ATTACHMENT0_OES</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span
lang=EN-US>, *</span><span lang=EN-US style='color:gray'>pColorBuffer</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *</span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US> = </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// View Resizing</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>XcodeEglResize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>ScnW</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>ScnH</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pLayer</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pEgCtx</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>UINT</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>FrameBuffer</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>UINT</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>ColorBuffer</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>&nbsp; = (</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>CAEAGLLayer</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>layer</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:blue'>CAEAGLLayer</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:gray'>pLayer</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glBindRenderbufferOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>ColorBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링의<span
lang=EN-US> Context</span>에 레이어 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>renderbufferStorage</span><span lang=EN-US>:</span><span
lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>fromDrawable</span><span lang=EN-US>:</span><span
lang=EN-US style='color:gray'>layer</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링의<span
lang=EN-US> Context </span>설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glGetRenderbufferParameterivOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_WIDTH_OES</span><span
lang=EN-US>, </span><span lang=EN-US style='color:gray'>ScnW</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glGetRenderbufferParameterivOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_OES</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>GL_RENDERBUFFER_HEIGHT_OES</span><span
lang=EN-US>, </span><span lang=EN-US style='color:gray'>ScnH</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if(</span><span lang=EN-US style='color:#880000'>glCheckFramebufferStatusOES</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_OES</span><span
lang=EN-US>) !=</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_COMPLETE_OES</span><span
lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>setCurrentContext</span><span lang=EN-US>:</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glBindFramebufferOES</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_FRAMEBUFFER_OES</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>FrameBuffer</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glViewport</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, *</span><span
lang=EN-US style='color:gray'>ScnW</span><span lang=EN-US>, *</span><span
lang=EN-US style='color:gray'>ScnH</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Present(eglSwapBuffers)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>XcodeEglPresent</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>&nbsp; = (</span><span
lang=EN-US style='color:blue'>EAGLContext</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:gray'>pEgCtx</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>pCtx</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=DE>[</span><span lang=DE style='color:gray'>pCtx</span><span lang=DE> </span><span
lang=DE style='color:#880000'>presentRenderbuffer</span><span lang=DE>:</span><span
lang=DE style='color:#A000A0'>GL_RENDERBUFFER_OES</span><span lang=DE>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><a
href="es00_egl_iphone_init2.zip">es00_egl_iphone_init2.zip</a></span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>12.3 OpenGL ES</span><span
style='font-size:16.0pt'>의 특징</span></p>

<p class=MsoNormal><span lang=EN-US>EGL </span>객체들이 생성되었다면<span lang=EN-US>
OpenGL ES API</span>를 사용해서<span lang=EN-US> 3D </span>장면을 구성할 수 있습니다<span
lang=EN-US>. </span>간단히 <span lang=EN-US>ES API</span>를 워크스테이션용<span
lang=EN-US> API</span>의 축소판으로 생각해도 됩니다<span lang=EN-US>. </span>따라서 <span
lang=EN-US>OpenGL</span>에 경험이 있는 분들은 <span lang=EN-US>ES</span>와의 차이를 확인해서<span
lang=EN-US> PC</span>용 프로그램을 수정하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>몇 가지 <span lang=EN-US>OpenGL ES</span>와 <span lang=EN-US>OpenGL</span>와의
중요한 차이를 열거해보면 먼저 렌더링 방식의 간소화입니다<span lang=EN-US>. </span>예를 들어 <span
lang=EN-US>Begin()/End()</span>로 장면을 구성하는<span lang=EN-US> OpenGL</span>의 즉시 모드가
사라졌습니다<span lang=EN-US>. 3D </span>장면을 표현하려면<span lang=EN-US> glDrawArrays() </span>또는<span
lang=EN-US> glDrawElements() </span>함수를 사용해야 합니다<span lang=EN-US>. </span>그리고 이
함수들은 정점 배열이 필요 하기 때문에<span lang=EN-US> 3D</span>의 모든 데이터는 연속된 메모리 공간으로 구성해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>다음으로 프리미티브가 좀 더 단순해졌습니다<span lang=EN-US>. </span>예를 들어 <span
lang=EN-US>QUAD, POLYGON </span>등이 사라졌는데 이들 형태로 구성된 데이터가 있다면 인덱스 버퍼를 구성해서<span
lang=EN-US> glDrawElements() </span>함수로 구현할 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>또한 파이프라인에서 취급되는 데이터 타입도<span lang=EN-US> double</span>형은 제거 되고
대신<span lang=EN-US> ES</span>는 고정 소수점<span lang=EN-US>(Fixed Float) API </span>함수가
추가되었습니다<span lang=EN-US>. </span>고정 소수점<span lang=EN-US> API</span>는 접미사<span
lang=EN-US> &quot;x&quot;</span>를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이 외에 텍스처는<span lang=EN-US> 2</span>차원만 취급하고<span lang=EN-US>,
</span>누적버퍼<span lang=EN-US>, </span>래스터 작업에서 사용된 함수들은 대부분 제거되었습니다<span
lang=EN-US>. </span>기타 나머지 차이점들은 필요에 따라<span lang=EN-US> OpenGL ES </span>에 대한 문서를
참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1960</span>년대 이후부터 그래픽스를 연구하는 많은 분들이 현실을 컴퓨터로
표현<span lang=EN-US>(</span>흉내내기<span lang=EN-US>)</span>하기 위해서 여러 적합한 모델을 연구하였고<span
lang=EN-US>, </span>현재<span lang=EN-US>, </span>프리미티브라는 기본 요소를 결합해서<span
lang=EN-US> 3D </span>가상 공간을 구성하는 방식을 사용하고 있고 프리미티브를 사용한 방식은 <span lang=EN-US>OpenGL,
Direct3D </span>등 현재의 모든<span lang=EN-US> 3D Graphics</span>에서 보편적으로 사용되고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>프리미티브는 정점<span lang=EN-US>(Vertex)</span>으로 구성됩니다<span
lang=EN-US>. </span>정점은 공간의 좌표<span lang=EN-US>(</span>위치<span lang=EN-US>)</span>를
기본으로 렌더링에 필요한 정보들<span lang=EN-US>(</span>빛에 대한 효과를 연산하는 법선 벡터<span lang=EN-US>,
</span>색상<span lang=EN-US>, </span>텍스처 좌표 등<span lang=EN-US>)</span>를 포함하고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES</span>에서 프리미티브 데이터는 연속적인 스트림으로 구성되어야
합니다<span lang=EN-US>. OpenGL</span>은 다중 스트림<span lang=EN-US>(Multi Data Stream)</span>과
단일 스트림<span lang=EN-US>(Single Data Stream) </span>두 가지를 지원하는데 다중 스트림은 정점의 포맷<span
lang=EN-US>((Vertex format)</span>에 따라 각각의 스트림으로 구성하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>예를 들어 폴리곤이 위치와 색상으로 구성되어 있다면 다음과 같이 정점 정보들을 배열 등을 사용해서 기하학 물체를
표현할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>위치에 대한 배열</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>GLfloat</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>vertexArray</span><span lang=EN-US>[</span><span lang=EN-US
style='color:red'>9</span><span lang=EN-US>] = {&nbsp; -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,-</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,-</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US> };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>색상에 대한 배열</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>GLfloat</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>colorArray</span><span lang=EN-US>[</span><span lang=EN-US
style='color:red'>12</span><span lang=EN-US>] = { </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>F</span><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>렌더링</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glDrawArrays</span><span
lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 가변적인 메모리가 필요하다면<span lang=EN-US> malloc() </span>함수를 사용해서
동적 메모리를 사용하거나 <span lang=EN-US>STL</span>의<span lang=EN-US> vector </span>컨테이너를
사용해도 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다중 스트림과 다르게 단일 스트림은 스트림 하나에 정점의 모든 데이터를 포함시키는 방법입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>단일 스트림 방식을<span lang=EN-US> Diect3D</span>의 고정 파이프라인에서 주로 많이
사용되는 방법이기도 합니다<span lang=EN-US>. </span>차이점은 <span lang=EN-US>Direct3D</span>는 위치<span
lang=EN-US>, </span>법선 벡터<span lang=EN-US>, </span>색상<span lang=EN-US>, </span>텍스처
좌표 등 정해진 순서에 따라 스트림을 구성해야 하지만<span lang=EN-US> OpenGL</span>은 이러한 순서에 특별한 규약은 없습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>단일 스트림을 사용하는 경우에 정점 구조체를 이용하면 단일 스트림을 쉽게 다룰 수 있고<span
lang=EN-US> Direct3D</span>와 호환성을 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>만약 위치와 색상을 가진 단일 스트림을 구성하고자 한다면 다음과 같은 구조체를 먼저 선언합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxD&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점</span><span
style='color:green'> </span><span style='color:green'>구조체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>GLfloat</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>x</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>y</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>z</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>GLfloat</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>r</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>g</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>b</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>a</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음은 이 구조체를 사용해서 간단하게 하나의 삼각형에 대한 프리미티브 데이터를 구성한 예입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VtxD</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>VtxArray</span><span lang=EN-US>[] =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 데이터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
-</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0F</span><span lang=EN-US>,-</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>,&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>, </span><span lang=FR
style='color:green'>// 0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=FR style='color:red'>1</span><span lang=FR>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR>,-</span><span lang=FR
style='color:red'>1</span><span lang=FR>.</span><span lang=FR style='color:
red'>0F</span><span lang=FR>,</span><span lang=FR style='color:red'>0</span><span
lang=FR>.</span><span lang=FR style='color:red'>0F</span><span lang=FR>,&nbsp;&nbsp;&nbsp;
</span><span lang=FR style='color:red'>0</span><span lang=FR>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR>,</span><span lang=FR
style='color:red'>1</span><span lang=FR>.</span><span lang=FR style='color:
red'>0F</span><span lang=FR>,</span><span lang=FR style='color:red'>0</span><span
lang=FR>.</span><span lang=FR style='color:red'>0F</span><span lang=FR>,</span><span
lang=FR style='color:red'>1</span><span lang=FR>.</span><span lang=FR
style='color:red'>0F</span><span lang=FR>, </span><span lang=FR
style='color:green'>// 1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=FR style='color:red'>0</span><span lang=FR>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR>, </span><span lang=FR
style='color:red'>1</span><span lang=FR>.</span><span lang=FR style='color:
red'>0F</span><span lang=FR>,</span><span lang=FR style='color:red'>0</span><span
lang=FR>.</span><span lang=FR style='color:red'>0F</span><span lang=FR>,&nbsp;&nbsp;&nbsp;
</span><span lang=FR style='color:red'>0</span><span lang=FR>.</span><span
lang=FR style='color:red'>0F</span><span lang=FR>,</span><span lang=FR
style='color:red'>0</span><span lang=FR>.</span><span lang=FR style='color:
red'>0F</span><span lang=FR>,</span><span lang=FR style='color:red'>1</span><span
lang=FR>.</span><span lang=FR style='color:red'>0F</span><span lang=FR>,</span><span
lang=FR style='color:red'>0</span><span lang=FR>.</span><span lang=FR
style='color:red'>0F </span><span lang=FR style='color:green'>// 2</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 구성한 정점 데이터 또는 프리미티브 데이터가 처리되기 위해서는 <span lang=EN-US>glEnableClientState()
</span>함수를 사용해서 파이프라인의 스트림 사용을 활성화 시켜야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>렌더링 컨텍스트의 위치에 대한 정점 스트림
활성화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glEnableClientState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_VERTEX_ARRAY</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>렌더링 컨텍스트의 색상에 대한 정점 스트림
활성화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glEnableClientState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_COLOR_ARRAY</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>스트림을 활성화 하고 나면 남은 것은 파이프라인에 연결<span lang=EN-US>(Binding)</span>하는
일입니다<span lang=EN-US>. </span>연결에서 주의할 것은 파이프라인에 연결은 정점을 구성하는 각각의 요소를 개별적으로 연결해야
한다는 것과 단일 스트림을 사용할 경우에<span lang=EN-US> Offset </span>을 적용해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>위치<span lang=EN-US>, </span>법선 벡터<span lang=EN-US>, </span>색상
버퍼<span lang=EN-US>, </span>텍스처 좌표에 대한 스트림에 대해서 각각 <span lang=EN-US>glVertexPointer(),
glNormalPointer(), glColorPointer(), glTexCoordPointer() </span>함수 등을 사용해서 연결하는데
다음은 다중 스트림의 위치와 색상 버퍼를 연결하는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>현재의 파이프라인에 정점 스트림 바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glVertexPointer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_FLOAT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>vertexArray</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>현재의 파이프라인에 색상 버퍼 바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glColorPointer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_FLOAT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>colorArray</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>스트림 연결 함수<span lang=EN-US> glVertexPointer(), …,
glTextCoordPointer() glNormalPointer</span>들은 동일한 규격의 인수들을 사용합니다<span
lang=EN-US>. </span>이들 함수의 첫 번째 인수는 차원과 같은 좌표의 수를 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>예를 들어 정점 데이터의 위치가<span lang=EN-US> x, y, z </span>로 작성되어 있다면<span
lang=EN-US> 3</span>을 적습니다<span lang=EN-US>. </span>색상 같은 경우<span lang=EN-US>
red, green, blue, alpha 4 </span>개의 요소로 구성할 경우가 가장 많은데 이 때<span lang=EN-US>
glColorPointer() </span>함수의 인수는<span lang=EN-US> 4</span>가 됩니다<span lang=EN-US>.
</span>법선 벡터를 연결하는<span lang=EN-US> glNormalPointer()</span>함수는 다른 함수와 다르게 좌표의 수가
필요 없습니다<span lang=EN-US>. </span>왜냐하면 그래픽스에서 법선 벡터는<span lang=EN-US> x, y, z 3</span>차원으로
구성되기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>인수 리스트의<span lang=EN-US> 2 </span>번째는 스트림의 형태입니다<span
lang=EN-US>. </span>예를 들어 색상이<span lang=EN-US> float </span>형이라면<span
lang=EN-US> GL_FLOAT</span>으로 설정합니다<span lang=EN-US>. </span>부동 소수점<span
lang=EN-US> float </span>형이 가장 일반적이지만 임베디드 기기는 연산 속도를 위해서 부동 소수점<span
lang=EN-US> float</span>형 보다 고정 소수점<span lang=EN-US>(fixed point)</span>을 지원하기도
하는데 이 경우<span lang=EN-US> GL_FIXED</span>로 지정하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>인수 리스트<span lang=EN-US> 3 </span>번째는<span lang=EN-US> Offset
</span>값으로 다중 스트림은<span lang=EN-US> 0</span>으로 설정 합니다<span lang=EN-US>. </span>만약
단일 스트림을 사용할 경우에는<span lang=EN-US> Offset </span>값을 조정해야 합니다<span lang=EN-US>. </span>정점
구조체를 사용하고 있다면 이 구조체의 크기를<span lang=EN-US> Offset </span>값으로 설정하면 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>인수 리스트<span lang=EN-US> 4 </span>번째는 데이터의 시작 위치 입니다<span
lang=EN-US>. </span>단일 스트림의 경우 정확한 시작 위치를 지정하기 위해서 정점 데이터를 바이트 형 포인터를 캐스팅해서 시작 위치를
지정하는 것이 직관적입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음은 단일 스트림을 사용하는 경우에<span lang=EN-US> Offset </span>과 시작 위치를
지정하는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT&nbsp;&nbsp; </span><span lang=EN-US style='color:gray'>Stride</span><span
lang=EN-US> = </span><span lang=EN-US style='color:blue'>sizeof</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>VtxD</span><span
lang=EN-US>);&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 스트림 데이터의 간격</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>char</span><span lang=EN-US>* </span><span lang=EN-US
style='color:gray'>pVtx</span><span lang=EN-US>&nbsp;&nbsp; = (</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:gray'>VtxArray</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치 버퍼 시작</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glVertexPointer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_FLOAT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Stride</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>pVtx</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:gray'>pVtx</span><span lang=EN-US> += </span><span lang=EN-US
style='color:blue'>sizeof</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>GLfloat</span><span lang=EN-US>)* </span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 색상 버퍼 시작<span
lang=EN-US> = GLfloat3</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glColorPointer</span><span lang=EN-US> (</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_FLOAT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Stride</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>pVtx</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 데이터를<span lang=EN-US> char</span>형으로 캐스팅 한 이유는<span
lang=EN-US> 'pVtx +=' </span>부분에서<span lang=EN-US> 1Byte</span>씩 계산이 되도록 하기 위함입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a
href="es01_triangle.zip">es01_triangle.zip</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>12.4 </span><span
style='font-size:16.0pt'>행렬과 변환<span lang=EN-US>(Matrix and Transform)</span></span></p>

<p class=MsoNormal>변환이란 간단히 말한다면 정점의 이동입니다<span lang=EN-US>. </span>컴퓨터 그래픽스는 실
세계<span lang=EN-US>(Real world)</span>를 컴퓨터로 흉내 낸 가상세계를 만들기 위해서 <span
lang=EN-US>3D </span>물체를 기하학적인 점<span lang=EN-US>, </span>선 삼각형 등의 프리미티브로 구성하고<span
lang=EN-US> affine </span>변환을 사용해서 <span lang=EN-US>3</span>차원 공간에서<span
lang=EN-US> 2</span>차원 화면 좌표 위치로 정점의 위치를 변환합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>그래픽 프로세서는 입력 받은<span lang=EN-US> 3</span>차원 데이터를 처리 단계가 일정한 파이프라인에서
변환을 수행하게 되는데 상대적인 모델 좌표들을<span lang=EN-US> 3D </span>세계의 절대 좌표로 변환하는 월드 변환<span
lang=EN-US>(World Transform), </span>월드 좌표를 카메라 공간으로 변환하는 뷰 변환<span lang=EN-US>(Viewing
Transform), 2</span>차원 화면으로 변환하되 장치에 독립인 정규 변환 또는 투영 변환<span lang=EN-US>(Projection
Transform), </span>정규 변환 좌표를 해당 장치 좌표로 변환하는 뷰포트 변환<span lang=EN-US>(Viewport
Transform) </span>등이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>파이프라인에서 정점은 행렬을 사용해서 변환하게 되는데 하나의 정점의 위치가 변환되는 과정은 크기<span
lang=EN-US>, </span>회전<span lang=EN-US>, </span>평행 이동으로 나눌 수 있으며 이들은 행렬을 사용해서 표현이
가능합니다<span lang=EN-US>. </span>만약 정점이<span lang=EN-US> 3</span>차원 좌표라면 크기<span
lang=EN-US>, </span>회전<span lang=EN-US>, </span>이동을<span lang=EN-US> 4</span>차원
동차 좌표<span lang=EN-US>(Homogeneous coordinate)</span>로 구성한 다음<span lang=EN-US>
4x4 </span>행렬 하나로 표현될 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL</span>은 월드 변환과 뷰 변환을 하나로 묶어서 월드<span
lang=EN-US>-</span>뷰 변환으로 처리하며<span lang=EN-US>, </span>이 변환에 대한 행렬을 만들고 파이프라인에
설정하면 카메라 효과를 만들게 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>게임에서 사용되는 투영 변환은 크게 투시<span lang=EN-US>(Perspective) </span>변환과
직교<span lang=EN-US>(Orthogonal) </span>변환 두 종류를 사용하는데 투시 변환은<span lang=EN-US> 3</span>차원
가상세계를 표현하기 위해서 뷰 체적<span lang=EN-US>(viewing volume)</span>을 사각뿔대 <span
lang=EN-US>(Frustum)</span>을 구성하는 것이며 직교 변환은 설계 도면처럼 원근감 없이<span lang=EN-US> 3D
</span>물체가 같은 비율로 표현되는 것으로<span lang=EN-US> 2</span>차원 게임에 주로 이용 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이들 여러 변환 중에서 게임 개발자가 가장 많이 투자 하는 부분은 월드<span lang=EN-US>-</span>뷰
변환입니다<span lang=EN-US>. </span>월드<span lang=EN-US>-</span>뷰 변환과 투영 변환은<span
lang=EN-US> glMatirixMode() </span>함수 호출에서부터 시작됩니다<span lang=EN-US>. </span>이 함수는
파이프라인에 있는 월드<span lang=EN-US>-</span>뷰 변환<span lang=EN-US>, </span>투영 변환<span
lang=EN-US>, </span>그리고 텍스처 좌표 변환 세 가지에 대한 행렬을 지정하는 함수로써 월드<span lang=EN-US>-</span>뷰
변환은 다음과 같이 <span lang=EN-US>GL_MODELVIEW </span>인수를 지정하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glMatrixMode</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_MODELVIEW</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>파이프라인의 행렬 값을 직접 수정할 수 있는 함수 들이 존재 하는데<span lang=EN-US>
glScalef(), glRotatef(), glTranslatef() </span>함수들은 각각 크기<span lang=EN-US>, </span>회전<span
lang=EN-US>, </span>평행 이동에 대한 값을 설정하는 함수 입니다<span lang=EN-US>. </span>그런데 이 함수들을
사용할 때 주의 할 것은 이들 함수들은 현재 설정되어 있는 행렬에 자신들의 행렬을 곱한다는 사실입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>예를 들어<span lang=EN-US> glScalef() </span>함수를 사용하면 크기 변환 행렬을 만들어서
다음 수식과 같이 파이프라인의 행렬을 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>활성화된 파이프라인의 행렬<span lang=EN-US> *= </span>크기 변환 행렬<span
lang=EN-US>[…];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt;glScalef() </span>함수로 만들어진 행렬<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=196 height=96
src="et02_gles11.files/image003.gif"></sub>, <sub><img border=0 width=73
height=23 src="et02_gles11.files/image004.gif"></sub>, <sub><img border=0
width=72 height=25 src="et02_gles11.files/image005.gif"></sub>, <sub><img
border=0 width=69 height=23 src="et02_gles11.files/image006.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt; glScalef() </span>함수의 역할<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=346 height=108
src="et02_gles11.files/image007.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>수식으로 알 수 있듯이 문제는 시간이 지날수록 이전 행렬에 누적해서 곱해진다는 것입니다<span
lang=EN-US>. </span>행렬의 곱셈 결과가 누적이 안되게 하려면 파이프라인의 행렬을 초기화 해야 하는데<span
lang=EN-US> 3D</span>이 행렬은 덧셈 보다는 곱셈이 주로 사용되므로 행렬을 항등 행렬<span lang=EN-US>(</span>또는
단위 행렬<span lang=EN-US>)</span>로 초기화 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>glLoadIdentity() </span>함수의 역할은 수식으로 표현하면 다음과
같이 활성화된 행렬을 항등 행렬로 설정하는 함수 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt; glLoadIdentity() </span>함수의 역할<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=182 height=96
src="et02_gles11.files/image008.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>glLoadIdentity() </span>함수를 사용해서 전체 장면을 그리기
전에 행렬을 초기화 하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glClear(…)</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glMatrixMode</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_MODELVIEW</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glPushMatrix();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glLoadIdentity</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glScalef();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>회전 변환에 대한<span lang=EN-US> glRotatef() </span>함수는<span
lang=EN-US> glScalef()</span>와 비슷하게 회전 변환 행렬을 만들어서 현재 활성화 되어 있는 행렬에 곱하는 함수 입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>활성화된 파이프라인의 행렬<span lang=EN-US> *= </span>회전 변환 행렬<span
lang=EN-US>[…];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt; glRotatef() </span>함수로 만들어진 행렬<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=221 height=96
src="et02_gles11.files/image009.gif"></sub>, <sub><img border=0 width=200
height=72 src="et02_gles11.files/image010.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&lt; glRotatef() </span>함수의 역할<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=314 height=96
src="et02_gles11.files/image011.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 함수도 올바르게 사용하려면 크기 변환과 같이<span lang=EN-US> glLoadIentity() </span>함수를
호출해서 현재의 행렬을 항등 행렬로 만들어 놓고 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glMatrixMode</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_MODELVIEW</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glLoadIdentity</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glRotatef</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>glRotatef() </span>함수의 인수는 라디안<span
lang=EN-US>(Radian)</span>이 아닌<span lang=EN-US> 10</span>진수<span lang=EN-US>(Degree)
</span>회전각<span lang=EN-US>, </span>그리고<span lang=EN-US> 3</span>차원 회전 축으로 구성되어
있어서 습니다<span lang=EN-US>. </span>예를 들어<span lang=EN-US> x </span>축으로<span
lang=EN-US> 30</span>도 회전을 적용하려면<span lang=EN-US> glRotatef(30, 1, 0, 0)</span>으로
설정하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>glTranslatef() </span>함수는 평행 이동을 위한 행렬입니다<span
lang=EN-US>. </span>이 함수는 평행 이동 변환 행렬을 만들어서 다음 수식과 같이 현재의 행렬에 곱셈을 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>활성화된 파이프라인의 행렬<span lang=EN-US> *= </span>이동 변환 행렬<span
lang=EN-US>[…];</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=177 height=96
src="et02_gles11.files/image012.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 함수도 올바르게 사용하려면 크기 변환과 같이<span lang=EN-US> glLoadIentity() </span>함수를
호출해서 현재의 행렬을 항등 행렬로 만들어 놓고 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glMatrixMode</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_MODELVIEW</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glLoadIdentity</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glTranslatef</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>애니메이션과 같이<span lang=EN-US> 3D </span>모델의 움직임을 위해서 크기 변환<span
lang=EN-US>, </span>회전 변환<span lang=EN-US>, </span>이동 변환이 적용될 수 있습니다<span
lang=EN-US>. </span>이 때 중요한 것은 이들의 적용 순서를 분명하게 하는 것이 중요한데 예들 들어서 다음과 같이 변환 함수<span
lang=EN-US> glScalef(), glRotatef(), glTranslatef() </span>가 적용하는 경우를 생각해 봅시다<span
lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glTranslatef</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0F</span><span lang=EN-US>, -</span><span
lang=EN-US style='color:red'>15</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0F</span><span lang=EN-US>, -</span><span
lang=EN-US style='color:red'>100</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0F</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glRotatef</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>30</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US>,</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0F</span><span lang=EN-US>,</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glScalef</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>3</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5F</span><span lang=EN-US>,</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>1F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5F</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glDrawElements</span><span
lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>파이프 라인에서는<span lang=EN-US> glDraw…() </span>함수에서부터 가까운 거리에 있는
함수부터 역순으로 <span lang=EN-US>glScalef(), glRotatef(), glTranslatef() </span>함수에 대한
변환을 적용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL</span>은 변환에 대한 함수를 즉시 적용하지 않고 누적시켰다가
렌더링 처리를 요청하는 함수<span lang=EN-US> Draw…() </span>함수가 호출될 때 역순으로 정점에 변환 함수들을 스택 자료
구조<span lang=EN-US>(stack data structure)</span>처럼 적용시킵니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>glScalef(), glRotatef(), glTranslatef() </span>함수는
각각 행렬을 만들어서 곱셈하는 것과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>앞의 예를<span lang=EN-US> 4x4</span>로 바꾸면 각각 다음과 같이 만들 수 있으며 변환된
정점의 위치는 이들을 순차적으로 곱셈하는 것과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>(x’, y’, z’, 1) =&nbsp; M_translate * M_rotation
* M_scaling *(x,y,z,1)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>OpenGL</span>은 오른손 좌표계를 사용하기 때문에 행렬을 오른쪽에서 왼쪽으로
곱셈을 합니다<span lang=EN-US>. </span>하드웨어는 행 중심으로 처리하는 것이 빠르므로 실제로는 왼손 좌표계의 행렬 곱과 같은
모습이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>(x’, y’, z’, 1) =&nbsp; (x,y,z,1) * M_scaling
* M_rotation * M_translate</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이들의 곱셈 순서는<span lang=EN-US> D3D</span>와 동일한데<span
lang=EN-US> D3D</span>도 수학 함수 처리는 같은 방식을 사용하기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링 오브젝트에 크기<span lang=EN-US>, </span>회전<span lang=EN-US>, </span>이동
변환을 각각 적용하는 것보다는 행렬들을 미리 연산하고 이것을 적용하는 것이 유리합니다<span lang=EN-US>. </span>예를 들어 렌더링
오브젝트의 폴리곤이<span lang=EN-US> 1000 </span>정도 있다고 합시다<span lang=EN-US>.</span></p>

<p class=MsoNormal>한 정점과 변환 행렬의 산술 연산이 대략<span lang=EN-US> 20</span>회 정도라 하고 크기<span
lang=EN-US>, </span>회전<span lang=EN-US>, </span>이동 변환을 한다면 대략<span lang=EN-US>20
* 20 * 1000 </span>회 정도가 소요되지만 크기<span lang=EN-US>, </span>회전<span lang=EN-US>,
</span>이동 변환 행렬을 미리 연산하고 이 연산 결과를 폴리곤에 적용하면 산술 연산 횟수가<span lang=EN-US> 1/3</span>로
줄어듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 때 주의할 것은 행렬의 곱셈은 교환 법칙이 안되므로 행렬의 곱셈 순서는 매우 중요합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>변환 행렬들의 곱셈은 각자의 고유한 방법이 있을 수 있으나 게임에서 가장 보편적으로 사용하는 방법은 크기<span
lang=EN-US>, </span>회전<span lang=EN-US>, </span>이동 변환 순서대로 곱셈하는 방법입니다<span
lang=EN-US>. </span>이러한 이유는<span lang=EN-US> 3D </span>장면을 구성하는 렌더링 오브젝트는 지역좌표<span
lang=EN-US>(Local Coordinate)</span>계의 중심으로 구성하기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3D Max, Maya </span>같은 그래픽 프로그램을 사용하는<span
lang=EN-US> Modeler</span>들은 지역 좌표계를 가지고 폴리곤을 구성합니다<span lang=EN-US>. </span>이 때
지역 좌표계는 <span lang=EN-US>(0,0,0) </span>위치로 설정하는데 이 위치는 크기와 회전에 대해서 어떤 영향도 받지 않습니다<span
lang=EN-US>. </span>이동 변환은 보통 월드 좌표계에서 오브젝트의 중심 위치와 대응되어야 하는데 지역 좌표계로 만들어진 렌더링 오브젝트에
월드 공간의 이동 변환을 먼저 적용하고 크기와 회전 변환을 적용하게 되면 중심 위치 또한 회전과 크기 변환을 받게 되기 때문에 이동 변환은 모든
변환의 마지막 단계에서 진행 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음은 행렬을 미리 연산해서 적용하는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glMatrixMode</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_MODELVIEW</span><span lang=EN-US>);&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Model-view </span><span style='color:green'>행렬을
활성화</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>c</span><span lang=EN-US> =</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>++</span><span
lang=EN-US style='color:gray'>c</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>mtScl</span><span lang=EN-US>[</span><span lang=EN-US
style='color:red'>16</span><span lang=EN-US>]={</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,&nbsp; };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>mtRot</span><span lang=EN-US>[</span><span lang=EN-US
style='color:red'>16</span><span lang=EN-US>]={</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,&nbsp; };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>mtTrs</span><span lang=EN-US>[</span><span lang=EN-US
style='color:red'>16</span><span lang=EN-US>]={</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,&nbsp; };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>mtWld</span><span lang=EN-US>[</span><span lang=EN-US
style='color:red'>16</span><span lang=EN-US>]={</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,&nbsp; };</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> </span><span lang=EN-US
style='color:gray'>mtWld2</span><span lang=EN-US>[</span><span lang=EN-US
style='color:red'>16</span><span lang=EN-US>]={</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>//glTranslatef(0.0F, -15.0F, -100.0F);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>//glRotatef(30.0F, 0.0F,1.0F,0.0F);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>//glScalef(3.5F,0.1F,3.5F);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>MatrixTranslate</span><span lang=EN-US>(&amp;</span><span
lang=EN-US style='color:gray'>mtTrs</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], </span><span
lang=EN-US style='color:red'>0.F</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>-</span><span lang=EN-US style='color:red'>15</span><span
lang=EN-US style='color:red'>.F</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>-</span><span lang=EN-US style='color:red'>100.F</span><span
lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>이동 행렬 구하기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>MatrixRotationY</span><span lang=EN-US>(&amp;</span><span
lang=EN-US style='color:gray'>mtRot</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], (</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>)(</span><span
lang=EN-US style='color:gray'>c</span><span lang=EN-US>));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>회전
행렬 구하기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>MatrixScaling</span><span lang=EN-US>(&amp;</span><span
lang=EN-US style='color:gray'>mtScl</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>1F</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5F</span><span lang=EN-US>); &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;</span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>크기 변환 행렬 구하기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>MatrixMultiple</span><span lang=EN-US>(&amp;</span><span
lang=EN-US style='color:gray'>mtWld2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], &amp;</span><span
lang=EN-US style='color:gray'>mtScl</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], &amp;</span><span
lang=EN-US style='color:gray'>mtRot</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]);&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬<span
lang=EN-US> = </span>크기 행렬<span lang=EN-US> * </span>회전 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>MatrixMultiple</span><span lang=EN-US>(&amp;</span><span
lang=EN-US style='color:gray'>mtWld2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], &amp;</span><span
lang=EN-US style='color:gray'>mtWld2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], &amp;</span><span
lang=EN-US style='color:gray'>mtTrs</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]); </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬 <span
lang=EN-US>*= </span>이동 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glLoadMatrixf</span><span lang=EN-US>(&amp;</span><span
lang=EN-US style='color:gray'>mtWld2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>계산된 월드 행렬을 파이프라인에
적용</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glDrawElements</span><span lang=EN-US>(…);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a
href="es02_transform.zip">es02_transform.zip</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다시 강조한다면 하나의 오브젝트에 크기<span lang=EN-US>, </span>회전<span
lang=EN-US>, </span>이동이 적용될 경우 이에 대한 행렬을 미리 계산에서 적용하는 것이 좋으며 최종 월드 행렬에 대한 각각의 변환
행렬의 곱셈 순서가 다음과 같음을 기억하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>월드 행렬<span lang=EN-US> = </span>크기 변환 행렬<span lang=EN-US> * </span>회전
행렬<span lang=EN-US> * </span>이동 행렬</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>생각해볼 문제<span lang=EN-US>) </span>태양을 중심으로 공전하는 달을 포함한 자전하는<span
lang=EN-US> 9</span>개의 태양계 행성을 시뮬레이션 할 때 달과 지구에 대한 월드 행렬의 곱셈을 어떻게 이루어질까요<span
lang=EN-US>?</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>12.5 GLU </span><span
style='font-size:16.0pt'>함수 만들기</span></p>

<p class=MsoNormal><b><span lang=EN-US>-gluOrtho2D-</span></b></p>

<p class=MsoNormal>워크스테이션용 <span lang=EN-US>OpenGL </span>라이브러리에는 <span
lang=EN-US>GLU(OpenGL Utility)</span>와 같은<span lang=EN-US> OpenGL</span>를 좀 더 편리하게
사용하기 위한 함수들이 존재했었는데 아쉽게도 임베디드 라이브러리는 <span lang=EN-US>GLU</span>가 없습니다<span
lang=EN-US>. (</span>안드로이드는<span lang=EN-US> JAVA</span>에 대한<span lang=EN-US>
GLU</span>가 존재<span lang=EN-US>)</span></p>

<p class=MsoNormal>하지만<span lang=EN-US> GLU</span>는<span lang=EN-US> OpenGL</span>을
가지고 확장해서 만들었기 때문에 우리는 임베디드용<span lang=EN-US> GLU</span>를 <span lang=EN-US>gl…()
</span>함수들을 사용해서 만들 수 있습니다<span lang=EN-US>. </span>가장 많이 사용되는<span lang=EN-US>
glu </span>함수 중에서 변환에 관련된 <span lang=EN-US>gluOrtho2D(), gluPerspective(), gluLootAt()
</span>함수들을 구현해 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>gluOrtho2D() </span>함수는<span lang=EN-US>
glOrtho() </span>함수에서<span lang=EN-US> Near = -1, Far = -1</span>로 설정해서 다음과 같이 쉽게
구현할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>MyGluOrtho2D</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>] ={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glMatrixMode</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_PROJECTION</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glLoadIdentity</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glOrtho</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>, -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glMatrixMode</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_MODELVIEW</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약<span lang=EN-US> glOrtho() </span>함수를 풀어서 구현하고자 한다면<span
lang=EN-US> glOrtho()</span>함수로 얻어지는 행렬을 만들어야 합니다<span lang=EN-US>. glOrtho() </span>함수는
<span lang=EN-US>MSDN</span>과 같은 문헌에는 다음 수식으로 알려져 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=424 height=144
src="et02_gles11.files/image013.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>하지만 실제로<span lang=EN-US> glOrtho() </span>함수로 구현된 행렬 값은 왼손 좌표계의
값으로 구해지게 되는데 왼손좌표계에서<span lang=EN-US> glOrtho()</span>함수는 다음과 같이 정리 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=441 height=168
src="et02_gles11.files/image014.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 프로그램으로 구현하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>MyGluOrtho</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>,</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Near</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Far</span><span lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>] ={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = +</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>/(</span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>-</span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = -(</span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>+</span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>)/(</span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>-</span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = +</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>/(</span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>-</span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = -(</span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>+</span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>)/(</span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>-</span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = -</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>/(</span><span
lang=EN-US style='color:gray'>Far</span><span lang=EN-US>-</span><span
lang=EN-US style='color:gray'>Near</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = -(</span><span
lang=EN-US style='color:gray'>Far</span><span lang=EN-US>+</span><span
lang=EN-US style='color:gray'>Near</span><span lang=EN-US>)/(</span><span
lang=EN-US style='color:gray'>Far</span><span lang=EN-US>-</span><span
lang=EN-US style='color:gray'>Near</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glMatrixMode</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_PROJECTION</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glLoadMatrixf</span><span lang=EN-US>((</span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>GLfloat</span><span lang=EN-US>*)&amp;</span><span
lang=EN-US style='color:gray'>mt</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>glMatrixMode</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_MODELVIEW</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>MyGluOrtho2D</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>MyGluOrtho</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Left</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Right</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Bottom</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>Top</span><span lang=EN-US>, -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>gluOrtho2D() </span>함수는<span lang=EN-US> 2D
</span>게임을 만들 때 아주 유용하게 사용할 수 있습니다<span lang=EN-US>. 2D </span>게임의 화면은 좌 상단이<span
lang=EN-US> (0,0), </span>우 하단이<span lang=EN-US> (</span>화면 너비<span lang=EN-US>,
</span>화면 높이<span lang=EN-US>)</span>로 지정되는 경우가 많습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이런 경우<span lang=EN-US> gluOrtho2D(0, </span>화면 너비<span
lang=EN-US>, 0, </span>화면 높이<span lang=EN-US>) </span>가 되는데 자신이 많은<span
lang=EN-US> gluOrtho()</span>함수에 이 값을 넣었을 때 올바로 출력된다면 함수를 성공적으로 만든 것이라 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
src="et02_gles11.files/image015.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US><a
href="es03_gluOrtho.zip">es03_gluOrtho.zip</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><b><span lang=EN-US>-gluPerspective-</span></b></p>

<p class=MsoNormal><span lang=EN-US>OpenGL</span>의<span lang=EN-US>
gluPerspective() </span>함수는 왼손 좌표계에서 다음과 같이 정리 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=440 height=141
src="et02_gles11.files/image016.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식을<span lang=EN-US> glFrustum() </span>함수를 사용해서 적용할 수 있지만
이것을 직접 구현한다면 다음과 같이 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#include </span><span lang=EN-US style='color:fuchsia'>&lt;math.</span><span
lang=EN-US style='color:fuchsia'>h</span><span lang=EN-US style='color:fuchsia'>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>MyGluPerspective</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Fov</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Aspect</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Near</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Far</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mtPrj</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>] ={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>COT</span><span lang=EN-US>&nbsp; = (</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>)</span><span
lang=EN-US style='color:#880000'>tan</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Fov</span><span lang=EN-US>/</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>. * </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>14159265358979</span><span lang=EN-US>/</span><span
lang=EN-US style='color:red'>180</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>COT</span><span lang=EN-US> = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>/</span><span lang=EN-US
style='color:gray'>COT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mtPrj</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] =&nbsp; </span><span
lang=EN-US style='color:gray'>COT</span><span lang=EN-US>/</span><span
lang=EN-US style='color:gray'>Aspect</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mtPrj</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] =&nbsp; </span><span
lang=EN-US style='color:gray'>COT</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mtPrj</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = -(</span><span
lang=EN-US style='color:gray'>Far</span><span lang=EN-US>+</span><span
lang=EN-US style='color:gray'>Near</span><span lang=EN-US>)/(</span><span
lang=EN-US style='color:gray'>Far</span><span lang=EN-US>-</span><span
lang=EN-US style='color:gray'>Near</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mtPrj</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = -</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>*</span><span lang=EN-US
style='color:gray'>Far</span><span lang=EN-US>*</span><span lang=EN-US
style='color:gray'>Near</span><span lang=EN-US>/(</span><span lang=EN-US
style='color:gray'>Far</span><span lang=EN-US>-</span><span lang=EN-US
style='color:gray'>Near</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>mtPrj</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>] = -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>mtPrj</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>)*</span><span
lang=EN-US style='color:red'>16</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>어떤 임베디드기기<span lang=EN-US> SDK</span>는<span lang=EN-US>
cot() </span>함수 지원이 안될 수 있어서 여러분은 <span lang=EN-US>tan() </span>함수의 역수로<span
lang=EN-US> cot()</span>를 사용하거나<span lang=EN-US> cos()/sin() </span>함수로 계산할 때도 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=142
src="et02_gles11.files/image017.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a
href="es03_gluPers.zip">es03_gluPers.zip</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><b><span lang=EN-US>-gluLookAt-</span></b></p>

<p class=MsoNormal>앞의 두 함수<span lang=EN-US> gluOrtho(), gluPerspective() </span>함수는
파이프라인의 투영<span lang=EN-US>(Projection) </span>행렬을 설정하는 함수 입니다<span lang=EN-US>.
</span>그런데 지금 구현한 <span lang=EN-US>gluLookAt()</span>함수는<span lang=EN-US>
Model-View </span>행렬을 설정하는 함수로 간단히 카메라의 행렬을 설정하는 것으로 생각해도 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=364 height=265
src="et02_gles11.files/image018.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;OpenGL Camera&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>의 <span lang=EN-US>D3DXMatrixLookAtRH()
</span>함수는<span lang=EN-US> gluLookAt() </span>함수와 일치하기 때문에 구현 방법은 <span
lang=EN-US>Direct3D document </span>문서를 가지고 만들어도 됩니다<span lang=EN-US>. </span>우리는
먼저 수식으로 알고리즘을 만들어 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>gluLookAt() </span>함수의 첫 번째 단계는<span
lang=EN-US> z</span>축을 설정하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=160 height=25
src="et02_gles11.files/image019.gif"></span></p>

<p class=MsoNormal>다음으로<span lang=EN-US> Up vector</span>와 앞서 구한<span
lang=EN-US> z </span>축 벡터를 사용해서 카메라의<span lang=EN-US> x </span>축을 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=182 height=25
src="et02_gles11.files/image020.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>z, x, </span>축을 구했으니<span lang=EN-US> z, x</span>를
가지고<span lang=EN-US> y </span>축을 계산합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=97 height=21
src="et02_gles11.files/image021.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>마지막 단계로<span lang=EN-US> Model-View </span>행렬을 다음과 같이 구성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=309 height=96
src="et02_gles11.files/image022.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>알고리즘은 간단한데 벡터의 정규화<span lang=EN-US>(Normalize)</span>와 외적<span
lang=EN-US>(Cross Product), </span>그리고 내적<span lang=EN-US>(Dot Product)</span>가
있어서 이 부분 또한 구현해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정규화<span lang=EN-US>, </span>외적<span lang=EN-US>, </span>내적의
내용은 생략하고<span lang=EN-US> 3</span>차원 벡터에 대해서 이들을 구현하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>Vec3Normalize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>r</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>) </span><span
lang=EN-US style='color:#880000'>sqrt</span><span lang=EN-US>( </span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]*</span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] + </span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]*</span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] + </span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>]*</span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US> (</span><span
lang=EN-US style='color:gray'>r</span><span lang=EN-US> == </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>r</span><span lang=EN-US> = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>/</span><span lang=EN-US
style='color:gray'>r</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] *= </span><span
lang=EN-US style='color:gray'>r</span><span lang=EN-US>; </span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] *= </span><span
lang=EN-US style='color:gray'>r</span><span lang=EN-US>; </span><span
lang=EN-US style='color:gray'>v</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] *= </span><span
lang=EN-US style='color:gray'>r</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>Vec3Cross</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] - </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] - </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] - </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>Vec3Dot</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>* </span><span lang=EN-US
style='color:gray'>v1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>* </span><span lang=EN-US
style='color:gray'>v2</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] + </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] + </span><span
lang=EN-US style='color:gray'>v1</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] * </span><span
lang=EN-US style='color:gray'>v2</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>];</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이들 함수를 사용해서<span lang=EN-US> gluLookAt() </span>함수 알고리즘을 수식으로
표현한 것을 코드로 옮긴다면 다음과 같이 구현됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>MyGluLookAt</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>* </span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>EyeX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>EyeY</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>EyeZ</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>AtX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>AtY</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>AtZ</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>UpX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>UpY</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>UpZ</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>Eye</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:gray'>EyeX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>EyeY</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>EyeZ</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>}, </span><span
lang=EN-US style='color:gray'>AxisY</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:gray'>UpX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>UpY</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>UpZ</span><span lang=EN-US>}, </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:gray'>EyeX</span><span lang=EN-US> - </span><span
lang=EN-US style='color:gray'>AtX</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Z = Eye - LookAt</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:gray'>EyeY</span><span lang=EN-US> - </span><span
lang=EN-US style='color:gray'>AtY</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:gray'>EyeZ</span><span lang=EN-US> - </span><span
lang=EN-US style='color:gray'>AtZ</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Vec3Normalize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Vec3Cross</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>AxisY</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// X = Y ^ Z</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Vec3Normalize</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Vec3Cross</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>AxisY</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Y = Z ^ X</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisY</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisY</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisY</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>]= -</span><span
lang=EN-US style='color:#880000'>Vec3Dot</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Eye</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>AxisX</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>]= -</span><span
lang=EN-US style='color:#880000'>Vec3Dot</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Eye</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>AxisY</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>]= -</span><span
lang=EN-US style='color:#880000'>Vec3Dot</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Eye</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>AxisZ</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>]= </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>memcpy</span><span lang=EN-US>(</span><span
lang=EN-US style='color:gray'>Out</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>m</span><span lang=EN-US>[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>], </span><span
lang=EN-US style='color:blue'>sizeof</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US>)* </span><span
lang=EN-US style='color:red'>16</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
src="et02_gles11.files/image023.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US><a href="es03_gluLookAt.zip">es03_gluLookAt.zip</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>12.6 </span><span
style='font-size:16.0pt'>텍스처 사용<span lang=EN-US>(Texturing)</span></span></p>

<p class=MsoNormal><b><span lang=EN-US>-Single Texturing-</span></b></p>

<p class=MsoNormal><span lang=EN-US>OpenGL ES</span>는<span lang=EN-US> 2D </span>텍스처만
사용할 수 있고<span lang=EN-US>, 1.1</span>은 최대<span lang=EN-US> 2</span>개의 멀티 텍스처를 사용할
수 있습니다<span lang=EN-US>. </span>워크스테이션용<span lang=EN-US> OpenGL</span>의 텍스처 사용은
싱글 텍스처 처리 방식은 <span lang=EN-US>glEnable(), glBindTexture() </span>두 개 함수만 사용하면 되었고<span
lang=EN-US>, </span>멀티텍스처<span lang=EN-US>(Multi-Texturing) </span>처리의 경우는<span
lang=EN-US> ARB </span>함수를 호출해서 사용했었습니다<span lang=EN-US>. ES</span>에서 텍스처 처리는<span
lang=EN-US> ARB</span>를 사용하는 것과 동일하고<span lang=EN-US> API </span>함수가 지원됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ES</span>에서 텍스처를 사용할 때 주의할 것은 먼저 이미지의 크기는 반드시<span
lang=EN-US> 2</span>의 승수로 되어 있어야 합니다<span lang=EN-US>. </span>간혹<span
lang=EN-US> 2</span>의 승수가 아니어도 동작하는 플랫폼 있지만 호환성을 위해서 이미지의 크기를<span lang=EN-US>
2</span>의 승수로 맞추는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>두 번째로 텍스처링에 대한 설정 함수의 호출 순서가 중요합니다<span lang=EN-US>. </span>이
순서가 맞지 않으면<span lang=EN-US> PC Simulator</span>에서 출력되더라도 대상 기기<span lang=EN-US>(Target
Device)</span>에서의 화면에는 제대로 출력되지 않은 경우가 많으므로 꼭 주의해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처를 생성하는 방법은<span lang=EN-US> OpenGL</span>과 동일하게 색상 버퍼를 만들고
<span lang=EN-US>glGenTextures() </span>함수로 텍스처를 만든 다음 <span lang=EN-US>glBindTexture()
</span>함수와 <span lang=EN-US>glTexImage2D() </span>함수를 사용해서 텍스처에 이미지 버퍼를 바인딩 하면 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>Int </span><span lang=EN-US style='color:gray'>ImgW</span><span
lang=EN-US> = </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:gray'>ImgH</span><span
lang=EN-US> = </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:gray'>ImgC</span><span
lang=EN-US> = </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:gray'>ImgF</span><span
lang=EN-US> = </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>unsigned</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>char</span><span lang=EN-US>* </span><span lang=EN-US
style='color:gray'>pPxl</span><span lang=EN-US> = </span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// TGA </span><span style='color:green'>파일에서 이미지 버퍼 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>Tga_FileRead</span><span lang=EN-US>(&amp;</span><span
lang=EN-US style='color:gray'>pPxl</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>ImgW</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>ImgH</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>ImgC</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>*)</span><span
lang=EN-US style='color:#A000A0'>MEDIA_DIR</span><span lang=EN-US
style='color:fuchsia'>&quot;tex/bg256x256.tga&quot;</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glGenTextures</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, &amp;</span><span
lang=EN-US style='color:gray'>m_TexID0</span><span lang=EN-US>);&nbsp; </span><span
lang=EN-US style='color:green'> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // </span><span
style='color:green'>텍스처 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_TexID0</span><span lang=EN-US>);</span><span
lang=EN-US style='color:green'> // </span><span style='color:green'>텍스처에 이미지 버퍼
바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>필터링<span lang=EN-US>, </span>어드레싱
설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_MIN_FILTER</span><span lang=EN-US>,
…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_WRAP_S</span><span lang=EN-US>, …);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>텍스처의 이미지 명세</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexImage2D</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>ImgF</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>ImgW</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>ImgH</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>ImgF</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_UNSIGNED_BYTE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>pPxl</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>free</span><span lang=EN-US>(</span><span lang=EN-US
style='color:gray'>pPxl</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>이미지 버퍼 지우기</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>단일 텍스처 처리<span lang=EN-US> (Single Texturing)</span>는 워크스테이션용<span
lang=EN-US> API</span>와 동일하게 적용해도 되지만 다중 텍스처 처리<span lang=EN-US>(Multi-Texturing)</span>을
고려해서<span lang=EN-US> API </span>함수들을 사용한다면 다음과 같이<span lang=EN-US> API </span>함수들을
호출해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// 0</span><span
style='color:green'>번 레이어<span lang=EN-US>(GL_TEXTURE0) </span>활성화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glClientActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glEnable</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// </span><span
style='color:green'>텍스처 좌표와 바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, …);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glEnableClientState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_COORD_ARRAY</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexCoordPointer</span><span lang=EN-US>(…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glTexEnvi</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_TEXTURE_ENV</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>GL_TEXTURE_ENV_MODE</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>GL_MODULATE</span><span
lang=EN-US>); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>멀티텍스처 환경설정</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glTexParameteri</span><span
lang=EN-US>(…);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 <span
lang=EN-US>Filtering, Addressing </span>설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glDrawArrays</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_TRIANGLE_FAN</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>,</span><span lang=EN-US style='color:red'>4</span><span lang=EN-US>);&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>렌더링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glBindTexture</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>텍스처 사용 해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glDisable</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
src="et02_gles11.files/image024.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Single Texture: <a
href="es04_tex_single.zip">es04_tex_single.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><b><span lang=EN-US>-Filtering, Addressing-</span></b></p>

<p class=MsoNormal><span lang=EN-US>ES 1.1 </span>버전은 간단한<span lang=EN-US> 3D
Filtering</span>은 워크스테이션용과 차이가 없기 때문에 생략하겠습니다<span lang=EN-US>. Addressing</span>은
임베디드 플랫폼 마다 차이가 있는데<span lang=EN-US> Clamp, Repeat</span>는 대부분 지원되지만<span
lang=EN-US> Mirror</span>의 경우 지원이 없는 경우도 있으니 먼저테스트를 해보기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// Clamp</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_WRAP_S</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_CLAMP_TO_EDGE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glTexParameteri</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>GL_TEXTURE_WRAP_T</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>GL_CLAMP_TO_EDGE</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// Repeat</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_WRAP_S</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_REPEAT</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_WRAP_T</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_REPEAT</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// Mirror</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_WRAP_S</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_MIRRORED_REPEAT_OES</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_WRAP_T</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_MIRRORED_REPEAT_OES</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=189 height=142
src="et02_gles11.files/image025.jpg">&nbsp;<img border=0 width=189 height=142
src="et02_gles11.files/image026.jpg">&nbsp;<img border=0 width=189 height=142
src="et02_gles11.files/image027.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Addressing: Clamp, Repeat, Mirror. <a
href="es04_tex_address.zip">es04_tex_address.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><b><span lang=EN-US>-Multi-Texturing-</span></b></p>

<p class=MsoNormal>텍스처 처리에서 어려운 부분이 멀티<span lang=EN-US>-</span>텍스처입니다<span
lang=EN-US>. </span>이것은 이론이 어려운 것이 아니라<span lang=EN-US> API </span>함수들의 호출 순서가 중요하기
때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>앞서<span lang=EN-US> Single Texturing</span>에서 사용된<span
lang=EN-US> API </span>함수들의 호출 순서를 잘 기억하고 있다면<span lang=EN-US> Multi-Texturing </span>도
쉽게 구현할 수 있습니다<span lang=EN-US>. </span>다음은 다중 텍스처 처리 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 0</span><span style='color:green'>번<span lang=EN-US>
Stage </span>텍스처 활성화<span lang=EN-US>, binging</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glClientActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindTexture</span><span lang=EN-US> (</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_TexID0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glEnable</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexCoordPointer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_FLOAT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US style='color:gray'>Tex</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 0</span><span style='color:green'>번<span lang=EN-US>
Stage</span>의<span lang=EN-US> Blending </span>설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexEnvi</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_ENV</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_ENV_MODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_MODULATE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 0</span><span style='color:green'>번<span lang=EN-US>
Stage</span>의 텍스처<span lang=EN-US> Filtering, Addressing </span>설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, …);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 1</span><span style='color:green'>번<span lang=EN-US>
Stage </span>텍스처 활성화<span lang=EN-US>, binging</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glClientActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindTexture</span><span lang=EN-US> (</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:gray'>m_TexID1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glEnable</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexCoordPointer</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_FLOAT</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US style='color:gray'>Tex</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 1</span><span style='color:green'>번<span lang=EN-US>
Stage</span>의<span lang=EN-US> Blending </span>방법을 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexEnvi</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_ENV</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_ENV_MODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>GL_MODULATE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// 1</span><span style='color:green'>번<span lang=EN-US> Stage
</span>텍스처 <span lang=EN-US>Filtering, Addressing</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glTexParameteri</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, …);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glDrawArrays</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>LC_PT_TRIANGLE_FAN</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Draw</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE1</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Multi-Texturing </span><span
style='color:green'>해제</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindTexture</span><span lang=EN-US> (</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glDisable</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glActiveTexture</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>glBindTexture</span><span lang=EN-US> (</span><span
lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>glDisable</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>GL_TEXTURE_2D</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=302 height=227
src="et02_gles11.files/image028.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Multi-Texturing: <a
href="es04_tex_multi.zip">es04_tex_multi.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>glTexEnvi() </span>함수는 텍스처에서<span
lang=EN-US> Sampling</span>한 픽셀을 적용하는 방법을 설정하는 함수로<span lang=EN-US>
Multi-Texturing </span>처리에서는 함수의 첫 번째와 두 번째 인수에 각각 <span lang=EN-US>GL_TEXTURE_ENV,
GL_TEXTURE_ENV_MODE </span>값을 설정하고<span lang=EN-US>, </span>세 번째 인수는 <span
lang=EN-US>GL_MODULATE, GL_DECAL, GL_BLEND </span>중에서 하나를 선택합니다<span
lang=EN-US>. </span>디폴트 값은<span lang=EN-US> GL_MODULATE </span>이며 이 상수는 두 색상을<span
lang=EN-US> [0, 1.0] </span>범위로 설정하고 최종 색상은 두 색상의 곱으로 결정하도록 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>세 번째 인수는 플랫폼의 지원에 따라 <span lang=EN-US>GL_ADD, GL_COMBINE,
GL_ADD_SIGNED, GL_INTERPOLATE, GL_SUBTRACT </span>등을 사용할 수도 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>12.7 </span><span
style='font-size:16.0pt'>고정 소수점<span lang=EN-US>(Fixed Point) </span>처리</span></p>

<p class=MsoNormal>고정 소수점 처리는 <span lang=EN-US>FPU(Floating Point Unit)</span>가
없는 임베디드 시스템에서 실수 연산을 정수로 바꾸어 처리하는 방식으로<span lang=EN-US> 32</span>비트를 나누어서 소수점 이하는
하위<span lang=EN-US> 16</span>비트를 사용하고 상위<span lang=EN-US> 16</span>비트는 정수와 부호를 사용하는
방법입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>현재<span lang=EN-US> 3D</span>를 지원하는 임베디드 시스템은<span
lang=EN-US> FPU</span>가 있어서 굳이 고정 소수점 처리를 사용하지 않아도 됩니다<span lang=EN-US>. </span>또한
고정 소수점을 사용하더라도 렌더링 속도의 차이는 거의 없고<span lang=EN-US>, (</span>렌더링 부분에서 가장 많이 시간을 소모하는
부분은<span lang=EN-US> Rasterize, Blending, </span>그리고 화면의 출력입니다<span lang=EN-US>.)
</span>고정 소수점을 사용하게 되면 접미사가<span lang=EN-US> &quot;x&quot;</span>로 끝나는<span
lang=EN-US> API </span>함수를 사용해야 하고 행렬<span lang=EN-US>, </span>컨텐츠의 리소스 등을 전부 고정
소수점으로 바꾸어야 하기 때문에 현재는 많이 사용되지 않은 방식입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>부동 소수점<span lang=EN-US>(Floating Point)</span>에서 고정 소수점으로 바꾸는
공식은 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>V_fixed_point = floor(V_floating_point *
65536)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>65536</span>은<span lang=EN-US> 2</span>의<span
lang=EN-US> 16</span>승이므로 정수형의 경우<span lang=EN-US> &lt;&lt; 16</span>으로 처리하면 되고<span
lang=EN-US> float, double</span>형은<span lang=EN-US> 65536 </span>값을 곱한 후에 나머지를 버립니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>만약 고정 소수점을 사용하면 산술 연산을 조금 수정해야 합니다<span lang=EN-US>. </span>덧셈<span
lang=EN-US>, </span>뺄셈은 변함이 없으나 곱셈의 경우 두 고정 소수점은<span lang=EN-US> 65536 </span>값을
이미 곱한 결과이기 때문에<span lang=EN-US> 65536</span>으로 나누어야 하고 나눗셈의 경우는<span
lang=EN-US> 65536</span>을 다시 곱해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>예를 들어 부동 소수점<span lang=EN-US> v1, v2</span>가 있고<span
lang=EN-US>, </span>이 두 변수의 곱셈의 결과를<span lang=EN-US> v3 </span>합시다<span
lang=EN-US>. </span>그리고<span lang=EN-US> v1, v2, v3</span>의 고정 소수점을 각각<span
lang=EN-US> v1', v2', v3' </span>라 가정하고 이들을 풀어 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>v3</span>를 고정 소수점으로 바꾸면<span lang=EN-US>
65536</span>을 곱해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>v3' = v3 * 65536 = v1 * v2 * 65536 </span>이
되고 이를 완전한 고정소수점의 곱으로 바꾼다면</p>

<p class=MsoNormal><span lang=EN-US>v3' = v1 * v2 * 65536 * 65536 / 65536</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp; = (v1 * 65536) * (v2 *
65536) / 65536</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp; = v1' * v2' / 65536</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 소수점의 곱은<span lang=EN-US> 65536</span>으로 나누게 됩니다<span
lang=EN-US>. </span>나눗셈도 마찬가지로 풀어보면</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>v3' = v3 * 65536 = (v1 / v2) * 65536 </span>이
되고 이를 완전한 고정소수점의 곱으로 바꾼다면</p>

<p class=MsoNormal><span lang=EN-US>v3' = ( v1/v2 * (65536/65536) ) * 65536</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp; = ( (v1 * 65536) / (v2 *
65536) ) * 65536</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp; = v1' / v2' * 65536</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 되어 고정 소수점의 나눗셈은 나눗셈 결과에<span lang=EN-US> 65536 </span>값을 곱해야
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:#880000'>LCXFixed</span><span lang=EN-US
style='color:black'>(</span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US> </span><span lang=EN-US style='color:gray'>v</span><span
lang=EN-US style='color:black'>)&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
</span><span lang=EN-US style='color:blue'>return</span><span lang=EN-US
style='color:black'> </span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US style='color:black'>(</span><span lang=EN-US style='color:gray'>v</span><span
lang=EN-US style='color:black'> * </span><span lang=EN-US style='color:red'>65536</span><span
lang=EN-US style='color:black'>.</span><span lang=EN-US style='color:red'>0F</span><span
lang=EN-US style='color:black'>); }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:#880000'>LCXFixedMul</span><span lang=EN-US
style='color:black'>(</span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US style='color:black'> </span><span lang=EN-US style='color:gray'>v1</span><span
lang=EN-US style='color:black'>, </span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US style='color:black'> </span><span lang=EN-US style='color:gray'>v2</span><span
lang=EN-US style='color:black'>){ </span><span lang=EN-US style='color:blue'>return</span><span
lang=EN-US style='color:black'> (</span><span lang=EN-US style='color:gray'>v1</span><span
lang=EN-US> * </span><span lang=EN-US style='color:gray'>v2</span><span
lang=EN-US style='color:black'>) / </span><span lang=EN-US style='color:red'>65536</span><span
lang=EN-US style='color:black'>; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:#880000'>LCXFixedMiv</span><span lang=EN-US
style='color:black'>(</span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US style='color:black'> </span><span lang=EN-US style='color:gray'>v1</span><span
lang=EN-US style='color:black'>, </span><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US style='color:black'> </span><span lang=EN-US style='color:gray'>v2</span><span
lang=EN-US style='color:black'>){ </span><span lang=EN-US style='color:blue'>return</span><span
lang=EN-US style='color:black'> (</span><span lang=EN-US style='color:gray'>v1</span><span
lang=EN-US> * </span><span lang=EN-US style='color:red'>65536</span><span
lang=EN-US style='color:black'>)/</span><span lang=EN-US style='color:gray'>v2</span><span
lang=EN-US style='color:black'> ); }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>65536</span>는<span lang=EN-US> 2</span>의<span
lang=EN-US> 16</span>승이므로 곱셈과 나눗셈을 쉬프트<span lang=EN-US>(shift) </span>연산으로 바꿀 수
있는데 이런 경우<span lang=EN-US> 32</span>비트<span lang=EN-US> int </span>형보다 좀더 큰<span
lang=EN-US> 64</span>비트<span lang=EN-US> int</span>형으로<span lang=EN-US> casting
</span>해서 사용하는 것이 좋습니다<span lang=EN-US>.</span></p>

<br>
<br>

</div>

<?php
	include '../base/lc_tail.php';
?>
